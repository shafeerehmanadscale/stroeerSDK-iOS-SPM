// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AATKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import AATKit
import AdSupport
import AppTrackingTransparency
import CoreLocation
import CoreMotion
import CoreTelephony
import Foundation
import MessageUI
import Network
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol AATPlacement {
  @objc func getName() -> Swift.String
}
@objc public class AATDebugScreenConfiguration : ObjectiveC.NSObject {
  @objc public var appLogo: UIKit.UIImage?
  @objc public var title: Swift.String?
  @objc public var showBundleId: Swift.Bool
  @objc public var showTestMode: Swift.Bool
  @objc public var showLoadedAndLoadingAds: Swift.Bool
  @objc public var showDisabledNetworks: Swift.Bool
  @objc public var showRemovedNetworkSDKs: Swift.Bool
  @objc public var showExtraSDKs: Swift.Bool
  @objc public var showConsent: Swift.Bool
  @objc public var showIDFA: Swift.Bool
  @objc public var showDeviceType: Swift.Bool
  @objc public var shareEmail: Swift.String?
  @objc public init(appLogo: UIKit.UIImage?, title: Swift.String?, showBundleId: Swift.Bool = true, showTestMode: Swift.Bool = true, showLoadedAndLoadingAds: Swift.Bool = true, showDisabledNetworks: Swift.Bool = true, showRemovedNetworkSDKs: Swift.Bool = true, showDeviceType: Swift.Bool = true, showExtraSDKs: Swift.Bool = true, showConsent: Swift.Bool = true, showIDFA: Swift.Bool = true)
  @objc deinit
}
public protocol AATTargetingInformationProtocol : AnyObject {
  func hasKeywordTargeting() -> Swift.Bool
  func getValuesAsString(delimiter: Swift.String) -> Swift.String?
  func getKeywordTargetingMap() -> [Swift.String : [Swift.String]]?
  func getContentUrl() -> Swift.String?
  func getMultiContentUrls() -> [Swift.String]?
  func getUserTargeting() -> AATKit.AATUserTargeting?
  func getJoinedUserKeywords() -> Swift.String?
}
extension AATKit.AATTargetingInformationProtocol {
  public func hasKeywordTargeting() -> Swift.Bool
  public func getValuesAsString(delimiter: Swift.String) -> Swift.String?
  public func getJoinedUserKeywords() -> Swift.String?
}
@objc public protocol AATNativeAdData : ObjectiveC.NSObjectProtocol {
  @objc var title: Swift.String? { get }
  @objc var adDescription: Swift.String? { get }
  @objc var callToAction: Swift.String? { get }
  @objc var imageUrl: Swift.String? { get }
  @objc var iconUrl: Swift.String? { get }
  @objc var rating: AATKit.AATNativeAdRating? { get }
  @objc var brandingLogo: UIKit.UIView? { get }
  @objc var advertiser: Swift.String? { get }
  @objc var network: AATKit.AATAdNetwork { get }
  @objc var adInfo: AATKit.AATAdInfo? { get }
  @objc func attachToView(_ view: UIKit.UIView, mainImageView: UIKit.UIView?, iconView: UIKit.UIView?, ctaView: UIKit.UIView?)
  @objc func detachFromLayout()
  @objc func isExpired() -> Swift.Bool
  @objc func isReady() -> Swift.Bool
}
@available(iOS 13.0, *)
@objc public protocol AATAsyncInfeedBannerPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATInfeedBannerPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var collapsableBannerOptions: AATKit.AATCollapsibleBannerOptions? { get set }
  @objc func requestAd(request: AATKit.AATBannerRequest) async -> AATKit.AATBannerPlacementWrapperView?
  @objc func countAdSpace()
  @objc func enableCreativeHistory(size: Swift.Int)
  @objc func getCreativeHistory(completion: @escaping ([AATKit.AATPlacementHistoryInfo]) -> Swift.Void)
}
@objc public enum AATCurrency : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case USD
  case EUR
  case unknown
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol AATIronSourceDriverProtocol {
  func setHasUserConsent(isObtained: Swift.Bool)
  func updateCCPAConsentStatus(_ ccpaConsentStatus: Swift.Bool)
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
}
@objc public class AATNativeAdRating : ObjectiveC.NSObject {
  @objc public init(value: Swift.Double, scale: Swift.Double)
  @objc final public let value: Swift.Double
  @objc final public let scale: Swift.Double
  @objc deinit
}
@objc public enum AATNativeAdType : Swift.Int {
  case appInstall, content, video, unified, other, unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AATNativeAdAssetsType : Swift.String {
  case icon
  case mainImage
  case headline
  case desc
  case cta
  case advertiserInfo
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class AATSimpleConsent : AATKit.AATConsentImplementation {
  @objc public init(nonIABConsent: AATKit.NonIABConsent)
  @objc deinit
}
extension AATKit.AATSimpleConsent {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@_hasMissingDesignatedInitializers public class AATAccountRulesManager {
  public static let shared: AATKit.AATAccountRulesManager
  public func getChildAccountId(for network: AATKit.AATAdNetwork, parentAccountId: Swift.String) -> Swift.String?
  @objc deinit
}
public protocol AATFacebookDriverProtocol {
  static var shared: Self { get }
  func updateAdvertisingTrackingStatus(_ isEnabled: Swift.Bool)
}
@objc public enum AATManagedConsentState : Swift.Int {
  case unknown
  case withheld
  case custom
  case obtained
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AATCMPProtocol {
  @objc func isSuccessfullyInitialized(_ source: Swift.String) -> Swift.Bool
  @objc func start(_ source: Swift.String)
  @objc func setDelegate(_ source: Swift.String, _ delegate: any AATKit.AATCMPDelegate)
  @objc func reload(_ source: Swift.String, _ viewController: UIKit.UIViewController)
  @objc func showIfNeeded(_ source: Swift.String, _ viewController: UIKit.UIViewController)
  @objc func editConsent(_ source: Swift.String, _ viewController: UIKit.UIViewController)
}
public protocol AATAdDriverProtocol : AATKit.AATAdDriverLoggerProtocol, AATKit.AATInitializable {
  var adNetwork: AATKit.AATAdNetwork { get set }
  var adID: Swift.String? { get set }
  var adConfig: AATKit.AATAdConfig? { get set }
  func unload()
  func pause()
  func resume(controller: UIKit.UIViewController)
  func getPrice() -> AATKit.AATPriceInfo?
  func cancelLoading()
  func getConfigForReporting() -> AATKit.AATAdConfig?
  func getAdDebugInfo() -> AATKit.AATAdDebugInfo?
  func didWin()
}
extension AATKit.AATAdDriverProtocol {
  public func getPrice() -> AATKit.AATPriceInfo?
  public func cancelLoading()
  public func getConfigForReporting() -> AATKit.AATAdConfig?
  public func getAdDebugInfo() -> AATKit.AATAdDebugInfo?
  public func didWin()
}
@objc public enum AATShowIfNeededSetting : Swift.Int {
  case always
  case never
  case serverSideControl
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AATInitializable {
  @objc init()
}
@_hasMissingDesignatedInitializers @objc public class AATPlacementHistoryInfo : ObjectiveC.NSObject {
  @objc public var networkName: Swift.String
  @objc public var networkKey: Swift.String
  @objc public var timestamp: Foundation.TimeInterval
  @objc public var snapshot: UIKit.UIImage?
  @objc public var creativeID: Swift.String?
  @objc deinit
}
@available(iOS 15.0, *)
extension AATKit.AATPlacementHistoryInfo : Swift.Identifiable {
  @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@objc public protocol AATAdMobCustomEvents {
  @objc func setCustomEventDelegate(_ delegate: any AATKit.AATAdMobCustomEventsDelegate)
}
@objc public enum AATAdNetwork : Swift.Int, Swift.RawRepresentable, Swift.CaseIterable {
  public typealias RawValue = Swift.String
  case INMOBI
  case MINTEGRAL
  case ADMOB
  case EMPTY
  case APPLOVIN
  case APPLOVINMAX
  case SMARTAD
  case SMARTADSERVERDIRECT
  case RTB2
  case DFP
  case SMAATO
  case FACEBOOK
  case FEEDAD
  case UNITY
  case APPNEXUS
  case OGURY
  case CRITEOSDK
  case AMAZONHB
  case PUBNATIVE
  case TEADS
  case TAPPX
  case YOC
  case VUNGLE2
  case DFPDIRECT
  case IRONSOURCENEW
  case GRAVITERTB
  case SUPERAWESOME
  case KIDOZ
  case DISPLAYIO
  case ADMOBBIDDING
  public typealias AllCases = [AATKit.AATAdNetwork]
  nonisolated public static var allCases: [AATKit.AATAdNetwork] {
    get
  }
}
extension AATKit.AATAdNetwork {
  public var displayName: Swift.String {
    get
  }
}
extension AATKit.AATAdNetwork {
  public var rawValue: AATKit.AATAdNetwork.RawValue {
    get
  }
  public init?(rawValue: AATKit.AATAdNetwork.RawValue)
}
extension AATKit.AATAdNetwork : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
}
extension AATKit.AATAdNetwork : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public enum NonIABConsent : Swift.Int, Swift.CustomStringConvertible {
  case unknown
  case obtained
  case withheld
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AATAutoLoadBannerPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATAutoLoadBannerPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var collapsableBannerOptions: AATKit.AATCollapsibleBannerOptions? { get set }
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc func startAutoReload()
  @objc func stopAutoReload()
  @objc func hasAd() -> Swift.Bool
  @objc func getPlacementView() -> UIKit.UIView?
  @objc func setDefaultImage(image: UIKit.UIImage)
  @objc func setBannerAlign(alignment: AATKit.AATBannerAlign)
  @objc func enableCreativeHistory(size: Swift.Int)
  @objc func getCreativeHistory(completion: @escaping ([AATKit.AATPlacementHistoryInfo]) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers public class AATAdConfig : AATKit.AATAbstractAdConfig {
  public var network: AATKit.AATAdNetwork
  public var adId: Swift.String?
  @objc override public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
extension AATKit.AATAdConfig {
  public func getSupportedPlacementSizes() -> Swift.Set<AATKit.AATBannerSize>
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
extension AATKit.AATAdConfig {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
}
@objc public protocol AATDelegate {
  @objc optional func AATKitObtainedAdRules(fromTheServer: Swift.Bool)
  @objc optional func AATKitUnknownBundleId()
}
public enum AATBannerAdState : Swift.Equatable {
  case none
  case loadingAD
  case loaded(ad: Any?)
  case failedToLoad(error: Swift.String)
  case pauseForBannerAd
  case willResumeAfterBannerAd
  case didResumeAfterBannerAd
  public static func == (lhs: AATKit.AATBannerAdState, rhs: AATKit.AATBannerAdState) -> Swift.Bool
}
public enum AATFullscreenAdState : Swift.Equatable {
  case none
  case loadingAD
  case loaded(ad: Any?)
  case failedToLoad(error: Swift.String)
  case displayed
  case willDismiss
  case didDismiss
  public static func == (lhs: AATKit.AATFullscreenAdState, rhs: AATKit.AATFullscreenAdState) -> Swift.Bool
}
public enum AATNativeAdState : Swift.Equatable {
  case none
  case loadingAD
  case loaded(ad: Any?)
  case failedToLoad(error: Swift.String)
  case pauseForNativeAd
  case willResumeAfterNativeAd
  case didResumeAfterNativeAd
  public static func == (lhs: AATKit.AATNativeAdState, rhs: AATKit.AATNativeAdState) -> Swift.Bool
}
public protocol AATDatonomyDriver {
  static var shared: Self { get }
  func initializeDatonomySDK(apiKey: Swift.String)
  func reportImpression(impression: AATKit.AATImpression, adType: AATKit.AATAdType)
  func reportSessionDuration(duration: Swift.Double)
  func getLTVScore(completion: @escaping (Swift.Double?, Swift.String?) -> Swift.Void)
}
@objc public protocol AATRewardedVideoPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATRewardedVideoPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var adQualityDelegate: (any AATKit.AATAdQualityDelegate)? { get set }
  @objc func startAutoReload()
  @objc func stopAutoReload()
  @objc @discardableResult
  func reload() -> Swift.Bool
  @objc func hasAd() -> Swift.Bool
  @objc @discardableResult
  func show() -> Swift.Bool
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc var adInfo: AATKit.AATAdInfo? { get }
  @objc func isFrequencyCapReached() -> Swift.Bool
}
@objc public enum AATBannerSize : Swift.Int, Swift.RawRepresentable, Swift.CaseIterable {
  public typealias RawValue = Swift.String
  case banner300x50
  case banner320x53
  case banner768x90
  case banner300x250
  case banner468x60
  case multipleSizes
  case banner320x75
  case banner320x100
  case banner320x150
  case banner320x160
  case banner320x480
  case banner728x90
  case banner320x50
  case banner375x50
  case banner390x50
  case banner414x50
  case banner428x50
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var size: CoreFoundation.CGSize {
    get
  }
  public typealias AllCases = [AATKit.AATBannerSize]
  nonisolated public static var allCases: [AATKit.AATBannerSize] {
    get
  }
}
extension AATKit.AATBannerSize : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol AATRewardedAdDriverProtocol : AATKit.AATFullscreenAdDriverProtocol {
}
@objc public protocol AATAdNetworkDriverVersionProtocol : AATKit.AATInitializable {
  @objc func getVersion() -> Swift.String
}
public protocol AATAdNetworkDriverManager : AATKit.AATAdNetworkDriverVersionProtocol {
  static var shared: Self { get }
  func setDebugEnabled(enabled: Swift.Bool)
  func setRewardedAdSSVInfo(_ info: AATKit.AATRewardedAdSSVInfo)
}
extension AATKit.AATAdNetworkDriverManager {
  public func setRewardedAdSSVInfo(_ info: AATKit.AATRewardedAdSSVInfo)
}
@objc public enum AATGender : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case male
  case female
  case other
  case unknown
  public var rawValue: AATKit.AATGender.RawValue {
    get
  }
  public init?(rawValue: AATKit.AATGender.RawValue)
}
@objc public class AATDatonomyOptions : ObjectiveC.NSObject {
  final public let datonomyAPIKey: Swift.String?
  @objc public init(datonomyAPIKey: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class AATAdInfo : ObjectiveC.NSObject {
  @objc final public let priceInfo: AATKit.AATPriceInfo?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@frozen @objc public enum AATAdChoicesIconPosition : Swift.Int {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AATBannerRequestDelegate {
  @objc func shouldUseTargeting(for request: AATKit.AATBannerRequest, network: AATKit.AATAdNetwork) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class AATRuntimeConfiguration : ObjectiveC.NSObject {
  @objc public var consentRequired: Swift.Bool
  @objc public var consent: AATKit.AATConsentImplementation
  @objc public var adQualityManager: (any AATKit.AATAdQualityManagerProtocol)?
  @objc public var isUseGeoLocation: Swift.Bool
  @objc override dynamic public init()
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension AATKit.AATRuntimeConfiguration : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@_inheritsConvenienceInitializers @objc public class AATConfiguration : AATKit.AATRuntimeConfiguration {
  @objc weak public var delegate: (any AATKit.AATDelegate)?
  @objc public var initialRules: Swift.String?
  @objc public var shouldCacheRules: Swift.Bool
  @objc public var shouldSkipRules: Swift.Bool
  @objc public var alternativeBundleId: Swift.String?
  @objc public var shouldReportUsingAlternativeBundleId: Swift.Bool
  @objc public var testModeAccountId: Foundation.NSNumber?
  @objc public var useDebugShake: Swift.Bool
  @objc public var adNetworksOptions: AATKit.AATAdNetworksOptions?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension AATKit.AATConfiguration {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public protocol AATVungleDriverProtocol {
  static var shared: Self { get }
  func updateConsent(isEnabled: Swift.Bool)
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
  func updateCCPAConsentStatus(_ ccpaConsentStatus: Swift.Bool)
}
@objc public protocol AATManagedConsentDelegate {
  @objc func managedConsentNeedsUserInterface(_ managedConsent: AATKit.AATManagedConsent)
  @objc func managedConsentCMPFinished(with state: AATKit.AATManagedConsentState)
  @objc func managedConsentCMPFailedToLoad(_ managedConsent: AATKit.AATManagedConsent, with error: Swift.String)
  @objc func managedConsentCMPFailedToShow(_ managedConsent: AATKit.AATManagedConsent, with error: Swift.String)
}
public let rewardedVideoTag: Swift.String
public let thumbnailTag: Swift.String
@objc public class AATAdMobOptions : ObjectiveC.NSObject {
  final public let inlineBannerMaxHeight: Swift.Int?
  @objc public init(inlineBannerMaxHeight: Swift.Int)
  @objc deinit
}
@objc public class AATDFPOptions : ObjectiveC.NSObject {
  final public let inlineBannerMaxHeight: Swift.Int?
  @objc public init(inlineBannerMaxHeight: Swift.Int)
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init?(hex: Swift.String)
}
@objc public protocol AATInfeedBannerPlacement : AATKit.AATPlacement {
  typealias AATRequestCompletion = ((_ view: AATKit.AATBannerPlacementWrapperView?, _ error: AATKit.AATBannerRequestError?) -> Swift.Void)
  @objc var delegate: (any AATKit.AATInfeedBannerPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var collapsableBannerOptions: AATKit.AATCollapsibleBannerOptions? { get set }
  @objc func requestAd(request: AATKit.AATBannerRequest, completion: @escaping Self.AATRequestCompletion)
  @objc func cancel(request: AATKit.AATBannerRequest)
  @objc func countAdSpace()
  @objc func enableCreativeHistory(size: Swift.Int)
  @objc func getCreativeHistory(completion: @escaping ([AATKit.AATPlacementHistoryInfo]) -> Swift.Void)
}
public protocol AATApplovinDriverProtocol {
  static func setHasUserConsent(isObtained: Swift.Bool)
  static func setIsChildDirected(_ isChildDirected: Swift.Bool)
  static func setCCPAConsent(_ ccpaConsent: Swift.Bool)
}
@_hasMissingDesignatedInitializers @objc public class AATImpression : ObjectiveC.NSObject {
  @objc final public let bannerSize: Swift.String?
  @objc final public let adNetwork: AATKit.AATAdNetwork
  @objc final public let networkKey: Swift.String
  @objc final public let isDirectDeal: Swift.Bool
  @objc final public let priceInfo: AATKit.AATPriceInfo?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func getAdNetworkName() -> Swift.String
  @objc deinit
}
@objc public protocol AATAdQualityDelegate {
  @objc func didAdIncident(placement: any AATKit.AATPlacement, blockReasons: [Swift.String], reportReasons: [Swift.String], adNetworkSdk: AATKit.AATAdNetwork)
  @objc func didAdIncidentOnDisplay(placement: any AATKit.AATPlacement, blockReasons: [Swift.String], reportReasons: [Swift.String], adNetworkSdk: AATKit.AATAdNetwork)
  @objc func didAdVerified(placement: any AATKit.AATPlacement, adNetworkSdk: AATKit.AATAdNetwork)
  @objc func didAdNotVerified(placement: any AATKit.AATPlacement, error: any Swift.Error, adNetworkSdk: AATKit.AATAdNetwork)
}
public enum AATDriverLog : Foundation.LocalizedError {
  case startingLoadingAd
  case didLoad(adv: Any?)
  case didLogImpression
  case willRetrieveAdView(adView: Swift.AnyObject?)
  case willUnload
  case willPause
  case didExpire
  case driverWillResume(controller: UIKit.UIViewController)
  case willShowFullscreenAd
  case willLeaveApp
  case backToApp
  case willPresent
  case didPresent
  case willDismiss
  case didDismiss
  case didClick
  case didFailToLoad(error: Swift.String)
  case sdkNotFound
  case didFailToInitialiseSDK
  case invalidAdId
  case invalidAdSize(size: AATKit.AATBannerSize)
  case didFailToDisplay(error: Swift.String)
  case didEarnReward(reward: Any?)
  case customMessage(message: Swift.String)
}
@objc public class AATCollapsibleBannerOptions : ObjectiveC.NSObject {
  @objc public init(position: AATKit.AATCollapsibleBannerPosition = .top, minDelay: Swift.Int = 0)
  @objc deinit
}
@objc public enum AATCollapsibleBannerPosition : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case top, bottom
  public var rawValue: AATKit.AATCollapsibleBannerPosition.RawValue {
    get
  }
  public init?(rawValue: AATKit.AATCollapsibleBannerPosition.RawValue)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AATConsentImplementation : ObjectiveC.NSObject {
  public func setNoConsentNetworkStopSet(_ stopSet: Swift.Set<AATKit.AATAdNetwork>)
  @objc(setNoConsentNetworkStopSet:) public func objc_setNoConsentNetworkStopSet(_ stopSet: Swift.Set<Swift.Int>)
  @objc deinit
}
@objc public protocol AATVendorConsentDelegate {
  @objc func getConsentForNetwork(_ network: AATKit.AATAdNetwork) -> AATKit.NonIABConsent
  @objc func getConsentForAddapptr() -> AATKit.NonIABConsent
}
@_hasMissingDesignatedInitializers @objc public class AATVendorConsent : AATKit.AATConsentImplementation {
  @objc public init(delegate: (any AATKit.AATVendorConsentDelegate)?)
  @objc deinit
}
extension AATKit.AATVendorConsent {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc public class AATBannerCacheConfiguration : ObjectiveC.NSObject {
  @objc weak public var delegate: (any AATKit.AATBannerCacheDelegate)?
  @objc weak public var bannerRequestDelegate: (any AATKit.AATBannerRequestDelegate)? {
    @objc get
    @objc set
  }
  @objc public var shouldCacheAdditionalAdAtStart: Swift.Bool
  @objc public var requestConfiguration: AATKit.AATBannerRequest
  @objc public var minDelay: Swift.Double
  @objc public var retryInterval: Foundation.TimeInterval
  @objc public init(placementName: Swift.String, size: Swift.Int)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension AATKit.AATBannerCacheConfiguration : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
@objc public protocol AATMultiSizeBannerPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATMultiSizeBannerPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var collapsableBannerOptions: AATKit.AATCollapsibleBannerOptions? { get set }
  @objc func startAutoReload()
  @objc func startAutoReload(seconds: Foundation.TimeInterval)
  @objc func stopAutoReload()
  @objc func setAutoreloadInterval(seconds: Foundation.TimeInterval)
  @objc func reload(forceLoad: Swift.Bool) -> Swift.Bool
  @objc func reload() -> Swift.Bool
  @objc func hasAd() -> Swift.Bool
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc func enableCreativeHistory(size: Swift.Int)
  @objc func getCreativeHistory(completion: @escaping ([AATKit.AATPlacementHistoryInfo]) -> Swift.Void)
}
@objc public class AATAppNexusOptions : ObjectiveC.NSObject {
  final public let autoCloseTime: Swift.Int?
  final public let supportNativeBanner: Swift.Bool
  @objc public init(autoCloseTime: Foundation.NSNumber? = nil, supportNativeBanner: Swift.Bool = false)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AATLogger : ObjectiveC.NSObject {
  public static func log(level: AATKit.AATLogLevel, message: Swift.String, withoutAATFormatting: Swift.Bool = false, forceLog: Swift.Bool = false, callingMethod: Swift.String = #function, file: Swift.String = #file, tag: Swift.String = "AATKit")
  @objc override dynamic public init()
  @objc deinit
}
public protocol AATMintegralDriverProtocol {
  static var shared: Self { get }
  func setupConsent(consentStatus: Swift.Bool)
  func setupCCPA(ccpaStatus: Swift.Bool)
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
  func muteVideoAd(_ isMuted: Swift.Bool)
}
public protocol AATBannerAdDriverProtocol : AATKit.AATAdDriverProtocol {
  var delegate: (any AATKit.AATBannerDriverEventsDelegate)? { get set }
  func load(viewController: UIKit.UIViewController, adID: Swift.String, size: AATKit.AATBannerSize, extraConfiguration: AATKit.AATAdRequestConfiguration?) -> Swift.Bool
  func getBannerView() -> UIKit.UIView?
}
public class AATNetworkImpression {
  final public let price: Swift.Double
  final public let currencyCode: Swift.String
  final public let precision: AATKit.AATPricePrecisionType
  public init(price: Swift.Double, currencyCode: Swift.String, precision: AATKit.AATPricePrecisionType)
  @objc deinit
}
extension AATKit.AATNetworkImpression : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc public enum AATLogLevel : Swift.Int, Swift.CaseIterable {
  case verbose = 1
  case debug
  case info
  case warn
  case error
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AATKit.AATLogLevel]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [AATKit.AATLogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public struct AATAdRequestConfiguration {
  public var extraInfo: Swift.String?
  public var isRTARule: Swift.Bool?
  public var waterfallId: Swift.String
  public var collapsibleBannerPosition: Swift.String?
  public var networksOptions: AATKit.AATAdNetworksOptions?
}
public protocol AATPubNativeDriverProtocol {
  static var shared: Self { get }
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
}
@objc @_hasMissingDesignatedInitializers public class AATAbstractAdConfig : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(iOS 13.0, *)
@objc public protocol AATAsyncNativeAdPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATAsyncNativePlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc func reload() async -> (any AATKit.AATNativeAdData)?
  @objc func getNumberOfCurrentlyLoadingNativeAds() -> Swift.Int
  @objc func hasAd() -> Swift.Bool
  @objc func reportAdSpace() -> Swift.Bool
  @objc func isFrequencyCapReached() -> Swift.Bool
}
@objc public enum AATAdType : Swift.Int, Swift.RawRepresentable, Swift.CaseIterable {
  public typealias RawValue = Swift.String
  case fullscreen
  case banner
  case native
  case rewarded
  case appOpen
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [AATKit.AATAdType]
  nonisolated public static var allCases: [AATKit.AATAdType] {
    get
  }
}
extension AATKit.AATAdType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol AATNativeAdPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATNativePlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc @discardableResult
  func reload() -> Swift.Bool
  @objc func getNumberOfCurrentlyLoadingNativeAds() -> Swift.Int
  @objc func hasAd() -> Swift.Bool
  @objc func reportAdSpace() -> Swift.Bool
  @objc func getNativeAd() -> (any AATKit.AATNativeAdData)?
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc func isFrequencyCapReached() -> Swift.Bool
}
public protocol AATDisplayIODriverProtocol {
  static var shared: Self { get }
  func initSDK(networkKey: Swift.String)
  func setUseGeoLocation(_ useGeoLocation: Swift.Bool)
}
@objc public protocol AATBannerCacheDelegate {
  @objc func firstBannerLoaded()
}
@objc public protocol AATBannerCacheStatusDelegate {
  @objc func cacheIsNoLongerEmpty()
  @objc func cacheIsEmpty()
}
@objc public enum AATBannerPlacementSize : Swift.Int, Swift.CaseIterable {
  case banner320x53
  case banner320x50
  case banner375x50
  case banner390x50
  case banner414x50
  case banner428x50
  case banner768x90
  case banner300x250
  case banner468x60
  case banner320x75
  case banner320x100
  case banner320x150
  case banner320x160
  case banner300x50
  case banner320x480
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [AATKit.AATBannerPlacementSize]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [AATKit.AATBannerPlacementSize] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AATAdMobCustomEventsDelegate {
  @objc func customEventLoaderDidFailAd()
  @objc func customEventLoaderDidReceiveAd()
  @objc func customEventReportImpression()
  @objc func customEventWillPresentModal()
  @objc func customEventWillDismissModal()
  @objc func customEventDidDismissModal()
  @objc func customEventWasClicked()
  @objc func didRewardUserWithReward(_ reward: AATKit.AATReward)
}
public protocol AATOguryDriverProtocol {
  static var shared: Self { get }
  func updateCCPAConsent(isOptOut: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AATBannerRequest : ObjectiveC.NSObject {
  @objc public var targetingInformation: [Swift.String : [Swift.String]]?
  @objc public var contentTargetingUrl: Swift.String?
  @objc public var multiContentTargetingUrls: [Swift.String]?
  @objc weak public var delegate: (any AATKit.AATBannerRequestDelegate)?
  @objc public init(delegate: (any AATKit.AATBannerRequestDelegate)?)
  public func setRequestBannerSizes(sizes: Swift.Set<AATKit.AATBannerSize>)
  @objc(setRequestBannerSizes:) public func objc_setRequestBannerSizes(sizes: Swift.Set<Swift.Int>)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol AATStickyBannerPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATStickyBannerPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var collapsableBannerOptions: AATKit.AATCollapsibleBannerOptions? { get set }
  @objc func startAutoReload()
  @objc func startAutoReload(seconds: Foundation.TimeInterval)
  @objc func stopAutoReload()
  @objc func setAutoreloadInterval(seconds: Foundation.TimeInterval)
  @objc func reload(forceLoad: Swift.Bool) -> Swift.Bool
  @objc func reload() -> Swift.Bool
  @objc func hasAd() -> Swift.Bool
  @objc func getPlacementView() -> UIKit.UIView?
  @objc func setDefaultImage(image: UIKit.UIImage)
  @objc func setBannerAlign(alignment: AATKit.AATBannerAlign)
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc func enableCreativeHistory(size: Swift.Int)
  @objc func getCreativeHistory(completion: @escaping ([AATKit.AATPlacementHistoryInfo]) -> Swift.Void)
}
@objc final public class AATUserTargeting : ObjectiveC.NSObject {
  final public var userId: Swift.String?
  final public var gender: AATKit.AATGender?
  final public var yearOfBirth: Foundation.NSNumber?
  final public var keywords: [Swift.String]?
  @objc public init(userId: Swift.String? = nil, gender: AATKit.AATGender = .unknown, yearOfBirth: Foundation.NSNumber? = nil, keywords: [Swift.String]? = nil)
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol AATAdDriverLoggerProtocol {
}
extension AATKit.AATAdDriverLoggerProtocol where Self : AATKit.AATAdDriverProtocol {
  public func logDriverMessage(logLevel: AATKit.AATLogLevel = .debug, driverLog: AATKit.AATDriverLog, callingMethod: Swift.String = #function, file: Swift.String = #file)
}
extension AATKit.AATAdDriverLoggerProtocol {
  public static func logDriverMessage(logLevel: AATKit.AATLogLevel = .debug, driverLog: AATKit.AATDriverLog, callingMethod: Swift.String = #function, file: Swift.String = #file)
  public func logDriverMessage(logLevel: AATKit.AATLogLevel = .debug, driverLog: AATKit.AATDriverLog, callingMethod: Swift.String = #function, file: Swift.String = #file)
}
@objc public protocol AATCMPDelegate {
  @objc func consentDidUpdate(_ state: AATKit.AATManagedConsentState)
  @objc func CMPFailedToShow(with error: Swift.String)
  @objc func CMPFailedToLoad(with error: Swift.String)
  @objc func CMPNeedsUI()
  @objc func didShowCMP()
}
@objc public protocol AATBannerCache {
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var cacheStatusDelegate: (any AATKit.AATBannerCacheStatusDelegate)? { get set }
  @objc var collapsableBannerOptions: AATKit.AATCollapsibleBannerOptions? { get set }
  @objc func updateRequestConfiguration(_ requestConfiguration: AATKit.AATBannerRequest, shouldRefresh: Swift.Bool)
  @objc func consume(force: Swift.Bool) -> AATKit.AATBannerPlacementWrapperView?
  @objc func consume() -> AATKit.AATBannerPlacementWrapperView?
  @objc func destroy()
  @objc func enableCreativeHistory(size: Swift.Int)
  @objc func getCreativeHistory(completion: @escaping ([AATKit.AATPlacementHistoryInfo]) -> Swift.Void)
}
public protocol AATNativeAdDriverEventsDelegate : AATKit.AATAdDriverEventsDelegate {
  var state: AATKit.AATNativeAdState { get set }
  var adType: AATKit.AATNativeAdType { get set }
  var brandingLogo: UIKit.UIView? { get set }
  var rating: AATKit.AATNativeAdRating? { get set }
  func setAsset(_ type: AATKit.AATNativeAdAssetsType, value: Swift.String)
}
public protocol AATNetworkDriverFactory {
  var networkManagerDriverName: Swift.String { get }
  var bannerDriverName: Swift.String? { get }
  var nativeAdDriverName: Swift.String? { get }
  var fullScreenDriverName: Swift.String? { get }
  var rewardedDriverName: Swift.String? { get }
  func muteVideoAd(_ isMuted: Swift.Bool)
  func setAdChoicesIconPosition(position: AATKit.AATAdChoicesIconPosition?)
  func isNetworkSDKAvailable() -> Swift.Bool
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
}
public protocol AATSmaatoDriverProtocol {
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AATSDK : ObjectiveC.NSObject {
  @objc public static func getVersion() -> Swift.String
  @objc public static func initAATKit(with configuration: AATKit.AATConfiguration?)
  @objc public static func enableDebugScreen()
  @objc public static func disableDebugScreen()
  @objc public static func getDebugInfo() -> Swift.String
  @objc public static func configureDebugScreen(configuration: AATKit.AATDebugScreenConfiguration)
  @objc public static func getDebugInfoObject() -> AATKit.AATDebugInfo?
  @objc public static func getLogLevel() -> AATKit.AATLogLevel
  @objc public static func reconfigure(configuration: AATKit.AATRuntimeConfiguration)
  @objc public static func isTablet() -> Swift.Bool
  @objc public static func maximumBannerSizePortrait() -> AATKit.AATBannerPlacementSize
  @objc public static func maximumBannerSizeLandscape() -> AATKit.AATBannerPlacementSize
  public static func fittingBannerSizesPortrait() -> Swift.Set<AATKit.AATBannerSize>
  @objc(fittingBannerSizesPortrait) public static func objc_fittingBannerSizesPortrait() -> Swift.Set<Swift.String>
  public static func fittingBannerSizesLandscape() -> Swift.Set<AATKit.AATBannerSize>
  @objc(fittingBannerSizesLandscape) public static func objc_fittingBannerSizesLandscape() -> Swift.Set<Swift.String>
  @objc public static func controllerViewDidAppear(controller: UIKit.UIViewController)
  @objc public static func controllerViewWillDisappear()
  @objc public static func createStickyBannerPlacement(name: Swift.String, size: AATKit.AATBannerPlacementSize) -> (any AATKit.AATStickyBannerPlacement)?
  @objc public static func createMultiSizeBannerPlacement(name: Swift.String) -> (any AATKit.AATMultiSizeBannerPlacement)?
  @objc public static func createAutoLoadBannerPlacement(name: Swift.String, size: AATKit.AATBannerPlacementSize) -> (any AATKit.AATAutoLoadBannerPlacement)?
  @objc public static func createAutoLoadMultiSizeBannerPlacement(name: Swift.String) -> (any AATKit.AATAutoLoadMultiSizeBannerPlacement)?
  @objc public static func createInfeedBannerPlacement(name: Swift.String, configuration: AATKit.AATBannerConfiguration) -> (any AATKit.AATInfeedBannerPlacement)?
  @available(iOS 13.0, *)
  public static func createAsyncInfeedBannerPlacement(name: Swift.String, configuration: AATKit.AATBannerConfiguration) -> (any AATKit.AATAsyncInfeedBannerPlacement)?
  @objc public static func createFullscreenPlacement(name: Swift.String) -> (any AATKit.AATFullscreenPlacement)?
  @objc public static func createRewardedVideoPlacement(name: Swift.String) -> (any AATKit.AATRewardedVideoPlacement)?
  @objc public static func createAppOpenAdPlacement(placementName: Swift.String) -> (any AATKit.AATAppOpenAdPlacement)?
  @objc public static func createNativeAdPlacement(name: Swift.String, supportsMainImage: Swift.Bool) -> (any AATKit.AATNativeAdPlacement)?
  @available(iOS 13.0, *)
  public static func createAsyncNativeAdPlacement(name: Swift.String, supportsMainImage: Swift.Bool) -> (any AATKit.AATAsyncNativeAdPlacement)?
  @objc public static func createBannerCache(configuration: AATKit.AATBannerCacheConfiguration) -> (any AATKit.AATBannerCache)?
  @objc public static func setAdChoicesIconPosition(position: AATKit.AATAdChoicesIconPosition)
  @objc public static func setNetworkEnabled(network: AATKit.AATAdNetwork, enabled: Swift.Bool)
  @objc public static func isNetworkEnabled(network: AATKit.AATAdNetwork) -> Swift.Bool
  @objc public static func getOption(optionName: Swift.String) -> Swift.String?
  @objc public static func isOptionEnabled(optionName: Swift.String) -> Swift.Bool
  @objc public static func setOption(optionName: Swift.String, optionValue: Swift.String)
  @objc public static func setTargetingInfo(info: [Swift.String : [Swift.String]])
  @objc public static func setUserTargeting(userTargeting: AATKit.AATUserTargeting)
  @objc public static func setContentTargetingUrl(targetingUrl: Swift.String)
  @objc public static func addAdNetworkForKeywordTargeting(network: AATKit.AATAdNetwork)
  @objc public static func removeAdNetworkForKeywordTargeting(network: AATKit.AATAdNetwork)
  @objc public static func setLogLevel(logLevel: AATKit.AATLogLevel)
  @objc public static func setVideoAdsMuted(_ isMuted: Swift.Bool)
  @objc public static func setIsChildDirected(_ isChildDirected: Swift.Bool)
  @objc public static func setReportsDelegate(_ delegate: any AATKit.AATReportsDelegate)
  @objc public static func isConsentOptIn() -> Swift.Bool
  @objc public static func setRewardedAdSSVInfo(info: AATKit.AATRewardedAdSSVInfo)
  @objc deinit
}
public protocol AATFullscreenAdDriverProtocol : AATKit.AATAdDriverProtocol {
  var delegate: (any AATKit.AATFullscreenDriverEventsDelegate)? { get set }
  var adQualityAdUnitId: Swift.String? { get set }
  func load(viewController: UIKit.UIViewController, adID: Swift.String, extraConfiguration: AATKit.AATAdRequestConfiguration?) -> Swift.Bool
  func showInternal() -> Swift.Bool
  func canLoad(adId: Swift.String) -> Swift.Bool
}
extension AATKit.AATFullscreenAdDriverProtocol {
  public func canLoad(adId: Swift.String) -> Swift.Bool
}
public protocol AATBannerDriverEventsDelegate : AATKit.AATAdDriverEventsDelegate {
  var state: AATKit.AATBannerAdState { get set }
}
@objc public class AATFeedAdOptions : ObjectiveC.NSObject {
  final public let shutterColor: UIKit.UIColor?
  final public let disableSpinner: Swift.Bool
  @objc public init(shutterColor: UIKit.UIColor? = nil, disableSpinner: Swift.Bool = false)
  @objc deinit
}
@frozen @objc public enum AATMediationType : Swift.Int {
  case WATERFALL = 1
  case AUCTION = 2
  case MAYO = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol AATAutoLoadMultiSizeBannerPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATAutoLoadMultiSizeBannerPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var collapsableBannerOptions: AATKit.AATCollapsibleBannerOptions? { get set }
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc func startAutoReload()
  @objc func stopAutoReload()
  @objc func enableCreativeHistory(size: Swift.Int)
  @objc func getCreativeHistory(completion: @escaping ([AATKit.AATPlacementHistoryInfo]) -> Swift.Void)
}
public protocol AATAmazonHBDriverProtocol {
  static var shared: Self { get }
  func setGeoLocationAllowed(locationAllowed: Swift.Bool)
  func mapAmazonPricesSheet()
  func setCCPAConsent(_ ccpaConsent: Swift.String)
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(AATKit.NetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: AATKit.NetworkReachabilityManager.ConnectionType, b: AATKit.NetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (AATKit.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: AATKit.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: AATKit.NetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension AATKit.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: AATKit.NetworkReachabilityManager.NetworkReachabilityStatus, rhs: AATKit.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
@objc public protocol AATAdQualityDriverDelegate {
  @objc func didAdVerified(ad: ObjectiveC.NSObject, adFormat: AATKit.AATAdType, adNetworkSdk: AATKit.AATAdNetwork)
  @objc func didAdNotVerified(ad: ObjectiveC.NSObject, adFormat: AATKit.AATAdType, error: any Swift.Error, adNetworkSdk: AATKit.AATAdNetwork)
  @objc func didAdIncident(ad: ObjectiveC.NSObject, adFormat: AATKit.AATAdType, blockReasons: [Swift.String], reportReasons: [Swift.String], adNetworkSdk: AATKit.AATAdNetwork)
  @objc func didAdIncidentOnDisplay(ad: ObjectiveC.NSObject, adFormat: AATKit.AATAdType, blockReasons: [Swift.String], reportReasons: [Swift.String], adNetworkSdk: AATKit.AATAdNetwork)
}
@objc public protocol AATAdQualityManagerProtocol {
  @objc func initDriver() -> any AATKit.AATAdQualityDriverProtocol
}
@objc public protocol AATAdQualityDriverProtocol {
  @objc var delegate: (any AATKit.AATAdQualityDriverDelegate)? { get set }
  @objc func verifyAd(ad: ObjectiveC.NSObject, adNetwork: AATKit.AATAdNetwork, format: AATKit.AATAdType, adUnitId: Swift.String?)
  @objc func willDisplayAd(ad: ObjectiveC.NSObject, adNetwork: AATKit.AATAdNetwork, format: AATKit.AATAdType, adUnitId: Swift.String?)
  @objc func didClickAd(ad: ObjectiveC.NSObject)
  @objc func removeAd(ad: ObjectiveC.NSObject)
}
@objc public class AATGraviteRTBOptions : ObjectiveC.NSObject {
  final public let forceCloseButtonForMraid: Swift.Bool
  @objc public init(forceCloseButtonForMraid: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class AATBannerPlacementWrapperView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var adInfo: AATKit.AATAdInfo?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AATDeviceManager {
  @objc deinit
}
public protocol AATApplovinMaxDriverProtocol {
  static func setHasUserConsent(isObtained: Swift.Bool)
  static func setIsChildDirected(_ isChildDirected: Swift.Bool)
  static func setCCPAConsent(_ ccpaConsent: Swift.Bool)
}
@_hasMissingDesignatedInitializers @objc public class AATManagedConsent : AATKit.AATConsentImplementation {
  @objc public init?(cmp: (any AATKit.AATCMPProtocol)?, delegate: any AATKit.AATManagedConsentDelegate, showIfNeededSetting: AATKit.AATShowIfNeededSetting = .serverSideControl)
  @objc public func showIfNeeded(_ viewController: UIKit.UIViewController)
  @objc public func showIfNeededOrRejected(daysAgo: Swift.Int, viewController: UIKit.UIViewController)
  @objc public func editConsent(_ viewController: UIKit.UIViewController)
  @objc public func reload(_ viewController: UIKit.UIViewController)
  @objc deinit
}
extension AATKit.AATManagedConsent : AATKit.AATCMPDelegate {
  @objc dynamic public func didShowCMP()
  @objc dynamic public func consentDidUpdate(_ state: AATKit.AATManagedConsentState)
  @objc dynamic public func CMPFailedToShow(with error: Swift.String)
  @objc dynamic public func CMPFailedToLoad(with error: Swift.String)
  @objc dynamic public func CMPNeedsUI()
}
extension AATKit.AATManagedConsent {
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
public protocol AATGraviteRTBDriverProtocol {
  static var shared: Self { get }
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
  func setIsPaid(_ isPaid: Swift.Bool)
  func setIsGDPRApplies(_ isGDPRApplies: Swift.Bool)
  func setLogLevel(_ logLevel: AATKit.AATLogLevel)
  func setUseGeoLocation(_ useGeoLocation: Swift.Bool)
}
@objc public protocol AATAppOpenAdPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATAppOpenPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc func startAutoReload()
  @objc func stopAutoReload()
  @objc @discardableResult
  func reload() -> Swift.Bool
  @objc func hasAd() -> Swift.Bool
  @objc @discardableResult
  func show() -> Swift.Bool
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc func isFrequencyCapReached() -> Swift.Bool
}
public protocol AATTappxDriverProtocol {
  static var shared: Self { get }
  func setupConsent(isObtained: Swift.Bool, consentString: Swift.String?)
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
  func setCCPAConsentString(_ ccpaConsentString: Swift.String)
}
@objc public class AATDisplayIOOptions : ObjectiveC.NSObject {
  public var showSoundControl: Swift.Bool
  public var interscrollerHeight: Swift.Int
  public var interscrollerTopOffset: Swift.Int
  @objc public init(showSoundControl: Swift.Bool, interscrollerHeight: Swift.Int, interscrollerTopOffset: Swift.Int)
  @objc deinit
}
@objc public class AATReward : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let value: Swift.String
  @objc public init(name: Swift.String, value: Swift.String)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum AATPricePrecisionType : Swift.Int, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  case unknown
  case estimated
  case floor
  case publisherProvided
  case exact
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class AATPluginVersioningTool : ObjectiveC.NSObject {
  @objc public static func appendPluginInformation(_ pluginName: AATKit.AATPluginName, patchLevel: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum AATPluginName : Swift.Int {
  case Adobe = 1
  case Corona = 2
  case Marmalade = 3
  case Unity = 4
  case Xamarin = 5
  case ReactNative = 6
  case Cordova = 7
  case Capacitor = 8
  case Flutter = 9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AATBannerRequestCompletionListener : AnyObject {
  func requestCompletedSuccessfully(request: AATKit.AATBannerRequest, with view: AATKit.AATBannerPlacementWrapperView)
  func requestFailedToLoad(request: AATKit.AATBannerRequest, with error: AATKit.AATBannerRequestError)
}
@_hasMissingDesignatedInitializers @objc public class AATDebugInfo : ObjectiveC.NSObject {
  @objc public var testBundleId: Swift.String?
  @objc public var testId: Swift.String?
  @objc public var consentInfo: Swift.String?
  @objc public var placementDebugInfo: [AATKit.AATDebugInfo.PlacementDebugInfo]
  public var availableAdNetworks: [AATKit.AATAdNetwork]
  public var disabledAdNetworks: [AATKit.AATAdNetwork]
  public var removedAdNetworks: [AATKit.AATAdNetwork]
  @objc public var extraSDK: [Swift.String]
  @objc public var deviceType: Swift.String
  @objc public var idfaString: Swift.String?
  @objc(availableAdNetworks) public var objcAvailableAdNetworks: [Swift.String] {
    @objc get
  }
  @objc(disabledAdNetworks) public var objcDisabledAdNetworks: [Swift.String] {
    @objc get
  }
  @objc(removedAdNetworks) public var objcRemovedAdNetworks: [Swift.String] {
    @objc get
  }
  @objc deinit
}
extension AATKit.AATDebugInfo {
  @_hasMissingDesignatedInitializers @objc public class PlacementDebugInfo : ObjectiveC.NSObject {
    @objc public var placementName: Swift.String
    @objc public var placementType: Swift.String
    @objc public var activeFrequencyCapping: AATKit.AATDebugInfo.PlacementDebugInfo.FrequencyCappingDebugInfo?
    @objc public var bannerAutoReloadInterval: Swift.Int
    @objc public var initialDelay: Swift.Int
    @objc public var remainingTime: Swift.Int
    @objc public var loadedAds: [AATKit.AATAdDebugInfo]
    @objc public var isLoadingNewAd: Swift.Bool
    @objc public var lastShownAd: AATKit.AATAdDebugInfo?
    @objc public var isAdQualityActive: Swift.Bool
    @objc deinit
  }
}
extension AATKit.AATDebugInfo.PlacementDebugInfo {
  @_hasMissingDesignatedInitializers @objc public class FrequencyCappingDebugInfo : ObjectiveC.NSObject {
    @objc public var maxImpressionsPerSession: Swift.Int
    @objc public var maxImpressionsPerHour: Swift.Int
    @objc public var maxImpressionsPerDay: Swift.Int
    @objc public var maxImpressionsPerWeek: Swift.Int
    @objc public var maxImpressionsPerMonth: Swift.Int
    @objc public var minTimeBetweenImpressions: Foundation.TimeInterval
    @objc deinit
  }
}
@objc public class AATAdDebugInfo : ObjectiveC.NSObject, Swift.Identifiable {
  public var network: Swift.String
  public var timestamp: Foundation.TimeInterval
  public var creativeId: Swift.String?
  public var bidder: Swift.String?
  public init(network: AATKit.AATAdNetwork, timestamp: Foundation.TimeInterval = Date().timeIntervalSince1970, creativeId: Swift.String?, bidder: Swift.String? = nil)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
  @objc deinit
}
@available(iOS 15.0, *)
extension AATKit.AATDebugInfo.PlacementDebugInfo : Swift.Identifiable {
  @available(iOS 15.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.ObjectIdentifier
}
@objc public protocol AATReportsDelegate {
  @objc func onReportSent(_ report: Swift.String)
}
@objc public protocol AATImpressionDelegate {
  @objc func didCountImpression(placement: (any AATKit.AATPlacement)?, _ impression: AATKit.AATImpression)
}
public protocol AATAdDriverEventsDelegate : AnyObject {
  func getTargetingInformation() -> (any AATKit.AATTargetingInformationProtocol)?
  func notifyListenerThatAdWasClicked()
  func notifyListenerWithNetworkImpression(networkImpression: AATKit.AATNetworkImpression)
  func notifyListenerThatAdExpired(adView: UIKit.UIView?)
  func getSupplyChainData() -> AATKit.AATSupplyChainData?
}
public protocol AATInMobiDriverProtocol {
  static var shared: Self { get }
  func configureConsent(gdprApplies: Swift.Bool, consentString: Swift.String?)
  func setCCPAConsentString(_ ccpaConsentString: Swift.String)
}
@objc public protocol AATAdDisplayDelegate {
  @objc func aatPauseForAd(placement: any AATKit.AATPlacement)
  @objc func aatResumeAfterAd(placement: any AATKit.AATPlacement)
}
@objc public protocol AATHaveAdDelegate {
  @objc func aatHaveAd(placement: any AATKit.AATPlacement)
}
@objc public protocol AATNoAdDelegate {
  @objc func aatNoAd(placement: any AATKit.AATPlacement)
}
@objc public protocol AATStickyBannerPlacementDelegate : AATKit.AATAdDisplayDelegate, AATKit.AATHaveAdDelegate, AATKit.AATNoAdDelegate {
}
@objc public protocol AATAutoLoadBannerPlacementDelegate : AATKit.AATAdDisplayDelegate, AATKit.AATHaveAdDelegate, AATKit.AATNoAdDelegate {
}
@objc public protocol AATMultiSizeBannerPlacementDelegate : AATKit.AATAdDisplayDelegate, AATKit.AATNoAdDelegate {
  @objc func aatHaveAdWithBannerView(placement: any AATKit.AATPlacement, bannerView: AATKit.AATBannerPlacementWrapperView)
}
@objc public protocol AATAutoLoadMultiSizeBannerPlacementDelegate : AATKit.AATAdDisplayDelegate, AATKit.AATNoAdDelegate {
  @objc func aatHaveAdWithBannerView(placement: any AATKit.AATPlacement, bannerView: AATKit.AATBannerPlacementWrapperView)
}
@objc public protocol AATInfeedBannerPlacementDelegate : AATKit.AATAdDisplayDelegate {
}
@objc public protocol AATFullscreenPlacementDelegate : AATKit.AATAdDisplayDelegate, AATKit.AATHaveAdDelegate, AATKit.AATNoAdDelegate {
}
@objc public protocol AATAppOpenPlacementDelegate : AATKit.AATFullscreenPlacementDelegate {
}
@objc public protocol AATRewardedVideoPlacementDelegate : AATKit.AATFullscreenPlacementDelegate {
  @objc func aatUserEarnedIncentive(placement: any AATKit.AATPlacement, aatReward: AATKit.AATReward)
}
@objc public protocol AATNativePlacementDelegate : AATKit.AATAdDisplayDelegate, AATKit.AATHaveAdDelegate, AATKit.AATNoAdDelegate {
}
@objc public protocol AATAsyncNativePlacementDelegate : AATKit.AATAdDisplayDelegate {
}
@objc public protocol AATFullscreenPlacement : AATKit.AATPlacement {
  @objc var delegate: (any AATKit.AATFullscreenPlacementDelegate)? { get set }
  @objc var statisticsDelegate: (any AATKit.AATStatisticsDelegate)? { get set }
  @objc var impressionDelegate: (any AATKit.AATImpressionDelegate)? { get set }
  @objc var adQualityDelegate: (any AATKit.AATAdQualityDelegate)? { get set }
  @objc func startAutoReload()
  @objc func stopAutoReload()
  @objc @discardableResult
  func reload() -> Swift.Bool
  @objc func hasAd() -> Swift.Bool
  @objc @discardableResult
  func show() -> Swift.Bool
  @objc var targetingInfo: [Swift.String : [Swift.String]]? { get set }
  @objc var contentTargetingUrl: Swift.String? { get set }
  @objc var multiContentTargetingUrls: [Swift.String]? { get set }
  @objc var adInfo: AATKit.AATAdInfo? { get }
  @objc func isFrequencyCapReached() -> Swift.Bool
}
@objc public class AATPriceInfo : ObjectiveC.NSObject {
  @objc public var price: Swift.Double
  @objc public var precision: AATKit.AATPricePrecisionType
  @objc public var currency: AATKit.AATCurrency
  public init(price: Swift.Double, precision: AATKit.AATPricePrecisionType, currency: AATKit.AATCurrency)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class AATLocationUtils : ObjectiveC.NSObject {
  public static let shared: AATKit.AATLocationUtils
  public var location: CoreLocation.CLLocation? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension AATKit.AATLocationUtils : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
}
@objc public class AATAdNetworksOptions : ObjectiveC.NSObject {
  public var appNexusOptions: AATKit.AATAppNexusOptions?
  public var feedAdOptions: AATKit.AATFeedAdOptions?
  public var adMobOptions: AATKit.AATAdMobOptions?
  public var dfpOptions: AATKit.AATDFPOptions?
  public var datonomyOptions: AATKit.AATDatonomyOptions?
  public var superAwesomeOptions: AATKit.AATSuperAwesomeOptions?
  public var graviteRTBOptions: AATKit.AATGraviteRTBOptions?
  public var displayIOOptions: AATKit.AATDisplayIOOptions?
  @objc public init(appNexusOptions: AATKit.AATAppNexusOptions? = nil, feedAdOptions: AATKit.AATFeedAdOptions? = nil, adMobOptions: AATKit.AATAdMobOptions? = nil, dfpOptions: AATKit.AATDFPOptions? = nil, datonomyOptions: AATKit.AATDatonomyOptions? = nil, superAwesomeOptions: AATKit.AATSuperAwesomeOptions? = nil, graviteRTBOptions: AATKit.AATGraviteRTBOptions? = nil, displayIOOptions: AATKit.AATDisplayIOOptions? = nil)
  @objc deinit
}
public protocol AATNativeAdDriverProtocol : AATKit.AATAdDriverProtocol {
  var delegate: (any AATKit.AATNativeAdDriverEventsDelegate)? { get set }
  func load(viewController: UIKit.UIViewController, adID: Swift.String, extraConfiguration: AATKit.AATAdRequestConfiguration?) -> Swift.Bool
  func attachToView(_ view: UIKit.UIView, mainImageView: UIKit.UIView?, iconView: UIKit.UIView?, ctaView: UIKit.UIView?)
  func isReady() -> Swift.Bool
}
public protocol AATUnityAdsDriverProtocol {
  static var shared: Self { get }
  func setHasUserConsent(isObtained: Swift.Bool)
  func setHasCCPAConsent(_ hasCCPAConsent: Swift.Bool)
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
}
public protocol AATGoogleDriverProtocol {
  static var shared: Self { get }
  func setAdChoicesIconPosition(position: AATKit.AATAdChoicesIconPosition?)
  func muteVideoAd(_ isMuted: Swift.Bool)
  func configureConsent(gdprApplies: Swift.Bool, consentStatus: AATKit.NonIABConsent, isVersion2: Swift.Bool, isAdPersonalizationAllowed: Swift.Bool)
  func setIsChildDirected(_ isChildDirected: Swift.Bool)
  func initialiseSDK()
}
public protocol AATDFPPreBidDriverProtocol {
  static var timeOutInSeconds: Foundation.TimeInterval { get }
  static func loadBannerAd(extraInfo: Swift.String, bannerSize: CoreFoundation.CGSize, request: Any, completion: @escaping ((Any) -> Swift.Void))
  static func loadFullscreenAd(extraInfo: Swift.String, request: Any, completion: @escaping ((Any) -> Swift.Void))
  static func loadRewardedAd(extraInfo: Swift.String, request: Any, completion: @escaping ((Any) -> Swift.Void))
  static func setIsChildDirected(_ isChildDirected: Swift.Bool)
  static func findPrebidCreativeSize(bannerView: UIKit.UIView)
}
public protocol AATFullscreenDriverEventsDelegate : AATKit.AATAdDriverEventsDelegate {
  var state: AATKit.AATFullscreenAdState { get set }
  func notifyListenerThatUserEarnedIncentive(with reward: AATKit.AATReward)
}
@objc public class AATRewardedAdSSVInfo : ObjectiveC.NSObject {
  @objc public var userId: Swift.String
  @objc public var customString: Swift.String?
  @objc public init(userId: Swift.String, customString: Swift.String? = nil)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public protocol AATAdMobDSPDriverProtocol {
  static var shared: Self { get }
  func initialiseSDK()
}
@_hasMissingDesignatedInitializers @objc public class AATBannerRequestError : ObjectiveC.NSObject, Foundation.LocalizedError {
  @objc public var errorDescription: Swift.String? {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AATConsentVendorsHandler {
  public static func readConsentStateFromUserDefaults() -> AATKit.AATManagedConsentState
  @objc deinit
}
@objc public class AATBannerAlign : ObjectiveC.NSObject {
  @objc final public let verticalAlign: AATKit.AATBannerAlign.VerticalAlign
  @objc final public let horizontalAlign: AATKit.AATBannerAlign.HorizontalAlign
  @objc public init(horizontalAlign: AATKit.AATBannerAlign.HorizontalAlign, verticalAlign: AATKit.AATBannerAlign.VerticalAlign)
  @objc public enum HorizontalAlign : Swift.Int, Swift.Equatable {
    case leading
    case trailing
    case center
    public static func == (lhs: AATKit.AATBannerAlign.HorizontalAlign, rhs: AATKit.AATBannerAlign.HorizontalAlign) -> Swift.Bool
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum VerticalAlign : Swift.Int, Swift.Equatable {
    case top
    case bottom
    case center
    public static func == (lhs: AATKit.AATBannerAlign.VerticalAlign, rhs: AATKit.AATBannerAlign.VerticalAlign) -> Swift.Bool
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AATBannerConfiguration : ObjectiveC.NSObject {
  @objc public var isManualAdSpaceCounting: Swift.Bool
  @objc public var collapsableBannerOptions: AATKit.AATCollapsibleBannerOptions?
  @objc override dynamic public init()
  @objc public func setNumberOfWorkers(_ numberOfWorkers: Swift.Int)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension AATKit.AATBannerConfiguration : Foundation.NSCopying {
  @objc dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
}
public protocol AATSuperAwesomeDriverProtocol {
  static var shared: Self { get }
  func muteVideoAd(_ isMuted: Swift.Bool)
}
@objc public class AATSuperAwesomeOptions : ObjectiveC.NSObject {
  public var bannerOptions: AATKit.AATSuperAwesomeOptions.BannerOptions?
  public var interstitialAdOptions: AATKit.AATSuperAwesomeOptions.InterstitialAdOptions?
  public var rewardedVideoOptionsOptions: AATKit.AATSuperAwesomeOptions.RewardedVideoOptions?
  @objc @frozen public enum Orientation : Swift.Int {
    case any = 0
    case portrait = 1
    case landscape = 2
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @frozen public enum CloseButtonState : Swift.Int {
    case enabled = 0
    case enabledNoDelay = 1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public init(bannerOptions: AATKit.AATSuperAwesomeOptions.BannerOptions? = nil, interstitialAdOptions: AATKit.AATSuperAwesomeOptions.InterstitialAdOptions? = nil, rewardedVideoOptionsOptions: AATKit.AATSuperAwesomeOptions.RewardedVideoOptions? = nil)
  @objc public class NetworkOptions : ObjectiveC.NSObject {
    public var parentalGateEnabled: Swift.Bool?
    public var bumperPageEnabled: Swift.Bool?
    public var bumperPageCustomAppName: Swift.String?
    public var bumperPageLogo: UIKit.UIImage?
    @objc public init(parentalGateEnabled: Swift.Bool = false, bumperPageEnabled: Swift.Bool = false, bumperPageCustomAppName: Swift.String? = nil, bumperPageLogo: UIKit.UIImage? = nil)
    @objc deinit
  }
  @objc deinit
}
@objc extension AATKit.AATSuperAwesomeOptions {
  @objc public class BannerOptions : AATKit.AATSuperAwesomeOptions.NetworkOptions {
    public var isBackgroundTransparent: Swift.Bool?
    @objc public init(parentalGateEnabled: Swift.Bool = false, bumperPageEnabled: Swift.Bool = false, bumperPageCustomAppName: Swift.String? = nil, bumperPageLogo: UIKit.UIImage? = nil, isBackgroundTransparent: Swift.Bool = true)
    @objc deinit
  }
}
@objc extension AATKit.AATSuperAwesomeOptions {
  @objc public class InterstitialAdOptions : AATKit.AATSuperAwesomeOptions.NetworkOptions {
    public var orientation: AATKit.AATSuperAwesomeOptions.Orientation?
    public var closeButtonState: AATKit.AATSuperAwesomeOptions.CloseButtonState?
    @objc public init(orientation: AATKit.AATSuperAwesomeOptions.Orientation = .any, closeButtonState: AATKit.AATSuperAwesomeOptions.CloseButtonState = .enabled, parentalGateEnabled: Swift.Bool = false, bumperPageEnabled: Swift.Bool = false, bumperPageCustomAppName: Swift.String? = nil, bumperPageLogo: UIKit.UIImage? = nil)
    @objc deinit
  }
}
@objc extension AATKit.AATSuperAwesomeOptions {
  @objc public class RewardedVideoOptions : AATKit.AATSuperAwesomeOptions.InterstitialAdOptions {
    public var closeButtonAtEnd: Swift.Bool?
    public var smallClickEnabled: Swift.Bool?
    public var closeButtonWarningEnabled: Swift.Bool?
    @objc public init(closeButtonAtEnd: Swift.Bool = false, smallClickEnabled: Swift.Bool = false, closeButtonWarningEnabled: Swift.Bool = false, orientation: AATKit.AATSuperAwesomeOptions.Orientation = .any, closeButtonState: AATKit.AATSuperAwesomeOptions.CloseButtonState = .enabled, parentalGateEnabled: Swift.Bool = false, bumperPageEnabled: Swift.Bool = false, bumperPageCustomAppName: Swift.String? = nil, bumperPageLogo: UIKit.UIImage? = nil)
    @objc deinit
  }
}
@objc public protocol AATStatisticsDelegate {
  @objc func AATKitCountedAdSpace(placement: (any AATKit.AATPlacement)?)
  @objc func AATKitCountedRequest(placement: (any AATKit.AATPlacement)?, for network: AATKit.AATAdNetwork)
  @objc func AATKitCountedResponse(placement: (any AATKit.AATPlacement)?, for network: AATKit.AATAdNetwork)
  @objc func AATKitCountedImpression(placement: (any AATKit.AATPlacement)?, for network: AATKit.AATAdNetwork)
  @objc func AATKitCountedNetworkImpression(placement: (any AATKit.AATPlacement)?, for network: AATKit.AATAdNetwork)
  @objc func AATKitCountedVImpression(placement: (any AATKit.AATPlacement)?, for network: AATKit.AATAdNetwork)
  @objc func AATKitCountedClick(placement: (any AATKit.AATPlacement)?, for network: AATKit.AATAdNetwork)
  @objc func AATKitCountedDirectDealImpression(placement: (any AATKit.AATPlacement)?, for network: AATKit.AATAdNetwork)
  @objc func AATKitCountedMediationCycle(placement: (any AATKit.AATPlacement)?)
}
@objc @_hasMissingDesignatedInitializers public class AATSupplyChainData : ObjectiveC.NSObject {
  final public let domain: Swift.String
  final public let accountId: Swift.String
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension AATKit.AATCurrency : Swift.Equatable {}
extension AATKit.AATCurrency : Swift.Hashable {}
extension AATKit.AATNativeAdType : Swift.Equatable {}
extension AATKit.AATNativeAdType : Swift.Hashable {}
extension AATKit.AATNativeAdType : Swift.RawRepresentable {}
extension AATKit.AATNativeAdAssetsType : Swift.Equatable {}
extension AATKit.AATNativeAdAssetsType : Swift.Hashable {}
extension AATKit.AATNativeAdAssetsType : Swift.RawRepresentable {}
extension AATKit.AATManagedConsentState : Swift.Equatable {}
extension AATKit.AATManagedConsentState : Swift.Hashable {}
extension AATKit.AATManagedConsentState : Swift.RawRepresentable {}
extension AATKit.AATShowIfNeededSetting : Swift.Equatable {}
extension AATKit.AATShowIfNeededSetting : Swift.Hashable {}
extension AATKit.AATShowIfNeededSetting : Swift.RawRepresentable {}
extension AATKit.NonIABConsent : Swift.Equatable {}
extension AATKit.NonIABConsent : Swift.Hashable {}
extension AATKit.NonIABConsent : Swift.RawRepresentable {}
extension AATKit.AATBannerSize : Swift.Equatable {}
extension AATKit.AATBannerSize : Swift.Hashable {}
extension AATKit.AATGender : Swift.Equatable {}
extension AATKit.AATGender : Swift.Hashable {}
extension AATKit.AATAdChoicesIconPosition : Swift.Equatable {}
extension AATKit.AATAdChoicesIconPosition : Swift.Hashable {}
extension AATKit.AATAdChoicesIconPosition : Swift.RawRepresentable {}
extension AATKit.AATAdChoicesIconPosition : Swift.Sendable {}
extension AATKit.AATAdChoicesIconPosition : Swift.BitwiseCopyable {}
extension AATKit.AATCollapsibleBannerPosition : Swift.Equatable {}
extension AATKit.AATCollapsibleBannerPosition : Swift.Hashable {}
extension AATKit.AATLogLevel : Swift.Equatable {}
extension AATKit.AATLogLevel : Swift.Hashable {}
extension AATKit.AATLogLevel : Swift.RawRepresentable {}
extension AATKit.AATBannerPlacementSize : Swift.Equatable {}
extension AATKit.AATBannerPlacementSize : Swift.Hashable {}
extension AATKit.AATBannerPlacementSize : Swift.RawRepresentable {}
extension AATKit.AATMediationType : Swift.Equatable {}
extension AATKit.AATMediationType : Swift.Hashable {}
extension AATKit.AATMediationType : Swift.RawRepresentable {}
extension AATKit.AATMediationType : Swift.Sendable {}
extension AATKit.AATMediationType : Swift.BitwiseCopyable {}
extension AATKit.NetworkReachabilityManager.ConnectionType : Swift.Equatable {}
extension AATKit.NetworkReachabilityManager.ConnectionType : Swift.Hashable {}
extension AATKit.AATPricePrecisionType : Swift.Equatable {}
extension AATKit.AATPricePrecisionType : Swift.Hashable {}
extension AATKit.AATPluginName : Swift.Equatable {}
extension AATKit.AATPluginName : Swift.Hashable {}
extension AATKit.AATPluginName : Swift.RawRepresentable {}
extension AATKit.AATBannerAlign.HorizontalAlign : Swift.Hashable {}
extension AATKit.AATBannerAlign.HorizontalAlign : Swift.RawRepresentable {}
extension AATKit.AATBannerAlign.VerticalAlign : Swift.Hashable {}
extension AATKit.AATBannerAlign.VerticalAlign : Swift.RawRepresentable {}
extension AATKit.AATSuperAwesomeOptions.Orientation : Swift.Equatable {}
extension AATKit.AATSuperAwesomeOptions.Orientation : Swift.Hashable {}
extension AATKit.AATSuperAwesomeOptions.Orientation : Swift.RawRepresentable {}
extension AATKit.AATSuperAwesomeOptions.Orientation : Swift.Sendable {}
extension AATKit.AATSuperAwesomeOptions.Orientation : Swift.BitwiseCopyable {}
extension AATKit.AATSuperAwesomeOptions.CloseButtonState : Swift.Equatable {}
extension AATKit.AATSuperAwesomeOptions.CloseButtonState : Swift.Hashable {}
extension AATKit.AATSuperAwesomeOptions.CloseButtonState : Swift.RawRepresentable {}
extension AATKit.AATSuperAwesomeOptions.CloseButtonState : Swift.Sendable {}
extension AATKit.AATSuperAwesomeOptions.CloseButtonState : Swift.BitwiseCopyable {}
