#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
#ifndef AATKIT_SWIFT_H
#define AATKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AATKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC6AATKit19AATAbstractAdConfig")
@interface AATAbstractAdConfig : NSObject <NSCopying>
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATAdChoicesIconPosition, closed) {
  AATAdChoicesIconPositionTopLeft = 0,
  AATAdChoicesIconPositionTopRight = 1,
  AATAdChoicesIconPositionBottomLeft = 2,
  AATAdChoicesIconPositionBottomRight = 3,
};


SWIFT_CLASS("_TtC6AATKit11AATAdConfig")
@interface AATAdConfig : AATAbstractAdConfig
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface AATAdConfig (SWIFT_EXTENSION(AATKit))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@class NSString;

@interface AATAdConfig (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC6AATKit14AATAdDebugInfo")
@interface AATAdDebugInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AATPlacement;

/// Conform to this protocol to be notified about the ads display events
SWIFT_PROTOCOL("_TtP6AATKit20AATAdDisplayDelegate_")
@protocol AATAdDisplayDelegate
/// This method will be called when the app is paused for an ad.
/// <em>NOTE:</em> This callback is unreliable due to inconsistent use of callbacks in different ad network SDKs.
- (void)aatPauseForAdWithPlacement:(id <AATPlacement> _Nonnull)placement;
/// This method will be called when the app resumes after displaying an ad
/// <em>NOTE:</em> This callback is unreliable due to inconsistent use of callbacks in different ad network SDKs.
- (void)aatResumeAfterAdWithPlacement:(id <AATPlacement> _Nonnull)placement;
@end

@class AATPriceInfo;

SWIFT_CLASS("_TtC6AATKit9AATAdInfo")
@interface AATAdInfo : NSObject
@property (nonatomic, readonly, strong) AATPriceInfo * _Nullable priceInfo;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AATAdMobCustomEventsDelegate;

SWIFT_PROTOCOL("_TtP6AATKit20AATAdMobCustomEvents_")
@protocol AATAdMobCustomEvents
- (void)setCustomEventDelegate:(id <AATAdMobCustomEventsDelegate> _Nonnull)delegate;
@end

@class AATReward;

SWIFT_PROTOCOL("_TtP6AATKit28AATAdMobCustomEventsDelegate_")
@protocol AATAdMobCustomEventsDelegate
- (void)customEventLoaderDidFailAd;
- (void)customEventLoaderDidReceiveAd;
- (void)customEventReportImpression;
- (void)customEventWillPresentModal;
- (void)customEventWillDismissModal;
- (void)customEventDidDismissModal;
- (void)customEventWasClicked;
- (void)didRewardUserWithReward:(AATReward * _Nonnull)reward;
@end


SWIFT_CLASS("_TtC6AATKit15AATAdMobOptions")
@interface AATAdMobOptions : NSObject
/// Init AATAdMobOptions
/// \param inlineBannerMaxHeight The maximum height for AdMob inline adaptive banners
///
- (nonnull instancetype)initWithInlineBannerMaxHeight:(NSInteger)inlineBannerMaxHeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATAdNetwork, open) {
  AATAdNetworkINMOBI = 0,
  AATAdNetworkMINTEGRAL = 1,
  AATAdNetworkADMOB = 2,
  AATAdNetworkEMPTY = 3,
  AATAdNetworkAPPLOVIN = 4,
  AATAdNetworkAPPLOVINMAX = 5,
  AATAdNetworkSMARTAD = 6,
  AATAdNetworkSMARTADSERVERDIRECT = 7,
  AATAdNetworkRTB2 = 8,
  AATAdNetworkDFP = 9,
  AATAdNetworkSMAATO = 10,
  AATAdNetworkFACEBOOK = 11,
  AATAdNetworkFEEDAD = 12,
  AATAdNetworkUNITY = 13,
  AATAdNetworkAPPNEXUS = 14,
  AATAdNetworkOGURY = 15,
  AATAdNetworkCRITEOSDK = 16,
  AATAdNetworkAMAZONHB = 17,
  AATAdNetworkPUBNATIVE = 18,
  AATAdNetworkTEADS = 19,
  AATAdNetworkTAPPX = 20,
  AATAdNetworkYOC = 21,
  AATAdNetworkVUNGLE2 = 22,
  AATAdNetworkDFPDIRECT = 23,
  AATAdNetworkIRONSOURCENEW = 24,
  AATAdNetworkGRAVITERTB = 25,
  AATAdNetworkSUPERAWESOME = 26,
  AATAdNetworkKIDOZ = 27,
  AATAdNetworkDISPLAYIO = 28,
  AATAdNetworkADMOBBIDDING = 29,
};


SWIFT_PROTOCOL("_TtP6AATKit16AATInitializable_")
@protocol AATInitializable
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL("_TtP6AATKit33AATAdNetworkDriverVersionProtocol_")
@protocol AATAdNetworkDriverVersionProtocol <AATInitializable>
- (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
@end

@class AATAppNexusOptions;
@class AATFeedAdOptions;
@class AATDFPOptions;
@class AATDatonomyOptions;
@class AATSuperAwesomeOptions;
@class AATGraviteRTBOptions;
@class AATDisplayIOOptions;

SWIFT_CLASS("_TtC6AATKit20AATAdNetworksOptions")
@interface AATAdNetworksOptions : NSObject
/// Init AATAdNetworksOptions
/// \param appNexusOptions AppNexus options. default is nil
///
/// \param feedAdOptions FeedAd options. default is nil
///
/// \param adMobOptions AdMob options. default is nil
///
/// \param dfpOptions DFP options. default is nil
///
/// \param datonomyOptions Datonomy options. default is nil
///
/// \param superAwesomeOptions SuperAwesome options. default is nil
///
/// \param graviteRTBOptions Gravite RTBSDK options. default is nil
///
/// \param displayIOOptions DisplayIo options. default is nil
///
- (nonnull instancetype)initWithAppNexusOptions:(AATAppNexusOptions * _Nullable)appNexusOptions feedAdOptions:(AATFeedAdOptions * _Nullable)feedAdOptions adMobOptions:(AATAdMobOptions * _Nullable)adMobOptions dfpOptions:(AATDFPOptions * _Nullable)dfpOptions datonomyOptions:(AATDatonomyOptions * _Nullable)datonomyOptions superAwesomeOptions:(AATSuperAwesomeOptions * _Nullable)superAwesomeOptions graviteRTBOptions:(AATGraviteRTBOptions * _Nullable)graviteRTBOptions displayIOOptions:(AATDisplayIOOptions * _Nullable)displayIOOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6AATKit20AATAdQualityDelegate_")
@protocol AATAdQualityDelegate
/// /// Called when the ad should be blocked or reported
/// \param placement placement instance
///
/// \param blockReasons Blocked reason string array
///
/// \param reportReasons Reported reason string array
///
/// \param adNetworkSdk The mediated ad network sdk
///
- (void)didAdIncidentWithPlacement:(id <AATPlacement> _Nonnull)placement blockReasons:(NSArray<NSString *> * _Nonnull)blockReasons reportReasons:(NSArray<NSString *> * _Nonnull)reportReasons adNetworkSdk:(enum AATAdNetwork)adNetworkSdk;
/// Called when the ad should be blocked or reported after display
/// \param placement placement instance
///
/// \param blockReasons Blocked reason string array
///
/// \param reportReasons Reported reason string array
///
/// \param adNetworkSdk The mediated ad network sdk
///
- (void)didAdIncidentOnDisplayWithPlacement:(id <AATPlacement> _Nonnull)placement blockReasons:(NSArray<NSString *> * _Nonnull)blockReasons reportReasons:(NSArray<NSString *> * _Nonnull)reportReasons adNetworkSdk:(enum AATAdNetwork)adNetworkSdk;
/// Called when an ad is successfully verified
/// \param placement placement instance
///
/// \param adNetworkSdk The mediated ad network sdk
///
- (void)didAdVerifiedWithPlacement:(id <AATPlacement> _Nonnull)placement adNetworkSdk:(enum AATAdNetwork)adNetworkSdk;
/// Called when the ad is not verified within the specified time or for unsupported adNetworkSdk
/// \param placement placement instance
///
/// \param error The error describing the ad not verified state
///
/// \param adNetworkSdk The mediated ad network sdk
///
- (void)didAdNotVerifiedWithPlacement:(id <AATPlacement> _Nonnull)placement error:(NSError * _Nonnull)error adNetworkSdk:(enum AATAdNetwork)adNetworkSdk;
@end

enum AATAdType : NSInteger;

SWIFT_PROTOCOL("_TtP6AATKit26AATAdQualityDriverDelegate_")
@protocol AATAdQualityDriverDelegate
- (void)didAdVerifiedWithAd:(NSObject * _Nonnull)ad adFormat:(enum AATAdType)adFormat adNetworkSdk:(enum AATAdNetwork)adNetworkSdk;
- (void)didAdNotVerifiedWithAd:(NSObject * _Nonnull)ad adFormat:(enum AATAdType)adFormat error:(NSError * _Nonnull)error adNetworkSdk:(enum AATAdNetwork)adNetworkSdk;
- (void)didAdIncidentWithAd:(NSObject * _Nonnull)ad adFormat:(enum AATAdType)adFormat blockReasons:(NSArray<NSString *> * _Nonnull)blockReasons reportReasons:(NSArray<NSString *> * _Nonnull)reportReasons adNetworkSdk:(enum AATAdNetwork)adNetworkSdk;
- (void)didAdIncidentOnDisplayWithAd:(NSObject * _Nonnull)ad adFormat:(enum AATAdType)adFormat blockReasons:(NSArray<NSString *> * _Nonnull)blockReasons reportReasons:(NSArray<NSString *> * _Nonnull)reportReasons adNetworkSdk:(enum AATAdNetwork)adNetworkSdk;
@end


SWIFT_PROTOCOL("_TtP6AATKit26AATAdQualityDriverProtocol_")
@protocol AATAdQualityDriverProtocol
@property (nonatomic, strong) id <AATAdQualityDriverDelegate> _Nullable delegate;
- (void)verifyAdWithAd:(NSObject * _Nonnull)ad adNetwork:(enum AATAdNetwork)adNetwork format:(enum AATAdType)format adUnitId:(NSString * _Nullable)adUnitId;
- (void)willDisplayAdWithAd:(NSObject * _Nonnull)ad adNetwork:(enum AATAdNetwork)adNetwork format:(enum AATAdType)format adUnitId:(NSString * _Nullable)adUnitId;
- (void)didClickAdWithAd:(NSObject * _Nonnull)ad;
- (void)removeAdWithAd:(NSObject * _Nonnull)ad;
@end


SWIFT_PROTOCOL("_TtP6AATKit27AATAdQualityManagerProtocol_")
@protocol AATAdQualityManagerProtocol
- (id <AATAdQualityDriverProtocol> _Nonnull)initDriver SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, AATAdType, open) {
  AATAdTypeFullscreen = 0,
  AATAdTypeBanner = 1,
  AATAdTypeNative = 2,
  AATAdTypeRewarded = 3,
  AATAdTypeAppOpen = 4,
};

@class NSNumber;

SWIFT_CLASS("_TtC6AATKit18AATAppNexusOptions")
@interface AATAppNexusOptions : NSObject
/// Init AATAppNexusOptions
/// \param autoCloseTime A delay in seconds after which  a full-screen ad will be dismissed, default value is nil.
///
/// \param supportNativeBanner A Boolean that describe if Banner Ad can serve a Native Ad, default is false.
///
- (nonnull instancetype)initWithAutoCloseTime:(NSNumber * _Nullable)autoCloseTime supportNativeBanner:(BOOL)supportNativeBanner OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6AATKit12AATPlacement_")
@protocol AATPlacement
/// Get placement name.
///
/// returns:
/// The placement name.
- (NSString * _Nonnull)getName SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AATAppOpenPlacementDelegate;
@protocol AATStatisticsDelegate;
@protocol AATImpressionDelegate;

SWIFT_PROTOCOL("_TtP6AATKit21AATAppOpenAdPlacement_")
@protocol AATAppOpenAdPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATAppOpenPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Conform to this protocol to be notified when there is no ad available
SWIFT_PROTOCOL("_TtP6AATKit15AATNoAdDelegate_")
@protocol AATNoAdDelegate
/// This method will be called when there is no ad available
- (void)aatNoAdWithPlacement:(id <AATPlacement> _Nonnull)placement;
@end


/// Conform to this protocol to be notified when there is an ad
SWIFT_PROTOCOL("_TtP6AATKit17AATHaveAdDelegate_")
@protocol AATHaveAdDelegate
/// This method will be called when there is an ad
- (void)aatHaveAdWithPlacement:(id <AATPlacement> _Nonnull)placement;
@end


/// Conform to this protocol to listen to the AATFullscreenPlacement events
SWIFT_PROTOCOL("_TtP6AATKit30AATFullscreenPlacementDelegate_")
@protocol AATFullscreenPlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end


/// Conform to this protocol to listen to the AATAppOpenPlacement events
SWIFT_PROTOCOL("_TtP6AATKit27AATAppOpenPlacementDelegate_")
@protocol AATAppOpenPlacementDelegate <AATFullscreenPlacementDelegate>
@end

@protocol AATInfeedBannerPlacementDelegate;
@class AATCollapsibleBannerOptions;
@class AATBannerRequest;
@class AATBannerPlacementWrapperView;
@class AATPlacementHistoryInfo;

SWIFT_PROTOCOL("_TtP6AATKit29AATAsyncInfeedBannerPlacement_") SWIFT_AVAILABILITY(ios,introduced=13.0)
@protocol AATAsyncInfeedBannerPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATInfeedBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
@property (nonatomic, strong) AATCollapsibleBannerOptions * _Nullable collapsableBannerOptions;
/// Request banner ad from the placement
/// \param request the <code>AATBannerRequest</code> to be used
///
/// \param completionHandler completion block
///
///
/// returns:
/// <code>AATBannerPlacementWrapperView</code>
- (void)requestAdWithRequest:(AATBannerRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(AATBannerPlacementWrapperView * _Nullable))completionHandler;
/// Manually Count an Ad Space
- (void)countAdSpace;
- (void)enableCreativeHistoryWithSize:(NSInteger)size;
- (void)getCreativeHistoryWithCompletion:(void (^ _Nonnull)(NSArray<AATPlacementHistoryInfo *> * _Nonnull))completion;
@end

@protocol AATAsyncNativePlacementDelegate;
@protocol AATNativeAdData;

SWIFT_PROTOCOL("_TtP6AATKit25AATAsyncNativeAdPlacement_") SWIFT_AVAILABILITY(ios,introduced=13.0)
@protocol AATAsyncNativeAdPlacement <AATPlacement>
@property (nonatomic, strong) id <AATAsyncNativePlacementDelegate> _Nullable delegate;
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
- (void)reloadWithCompletionHandler:(void (^ _Nonnull)(id <AATNativeAdData> _Nullable))completionHandler;
- (NSInteger)getNumberOfCurrentlyLoadingNativeAds SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
- (BOOL)reportAdSpace SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6AATKit31AATAsyncNativePlacementDelegate_")
@protocol AATAsyncNativePlacementDelegate <AATAdDisplayDelegate>
@end

@protocol AATAutoLoadBannerPlacementDelegate;
@class UIView;
@class UIImage;
@class AATBannerAlign;

SWIFT_PROTOCOL("_TtP6AATKit26AATAutoLoadBannerPlacement_")
@protocol AATAutoLoadBannerPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATAutoLoadBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
@property (nonatomic, strong) AATCollapsibleBannerOptions * _Nullable collapsableBannerOptions;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
/// Start the automatic reloading of the placement
- (void)startAutoReload;
/// Stop the automatic reloading of the placement
- (void)stopAutoReload;
/// Returns true if there is an ad loaded for given placement.
///
/// returns:
/// True if there is an ad loaded for given placement.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Returns placement view. Works only for banner placements.
///
/// returns:
/// Placement view
- (UIView * _Nullable)getPlacementView SWIFT_WARN_UNUSED_RESULT;
/// Sets placement default image. This image will be shown in placement when no ad is available.
/// \param image The image to set.
///
- (void)setDefaultImageWithImage:(UIImage * _Nonnull)image;
/// Sets gravity for ads that don’t fill entire placement area. Works only for sticky banner placements.
/// \param alignment The alignment to set.
///
- (void)setBannerAlignWithAlignment:(AATBannerAlign * _Nonnull)alignment;
- (void)enableCreativeHistoryWithSize:(NSInteger)size;
- (void)getCreativeHistoryWithCompletion:(void (^ _Nonnull)(NSArray<AATPlacementHistoryInfo *> * _Nonnull))completion;
@end


/// Conform to this protocol to listen to the AATStaticBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit34AATAutoLoadBannerPlacementDelegate_")
@protocol AATAutoLoadBannerPlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end

@protocol AATAutoLoadMultiSizeBannerPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit35AATAutoLoadMultiSizeBannerPlacement_")
@protocol AATAutoLoadMultiSizeBannerPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATAutoLoadMultiSizeBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
@property (nonatomic, strong) AATCollapsibleBannerOptions * _Nullable collapsableBannerOptions;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
/// Start the automatic reloading of the placement
- (void)startAutoReload;
/// Stop the automatic reloading of the placement
- (void)stopAutoReload;
- (void)enableCreativeHistoryWithSize:(NSInteger)size;
- (void)getCreativeHistoryWithCompletion:(void (^ _Nonnull)(NSArray<AATPlacementHistoryInfo *> * _Nonnull))completion;
@end


/// Conform to this protocol to listen to the AATMultiSizeBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit43AATAutoLoadMultiSizeBannerPlacementDelegate_")
@protocol AATAutoLoadMultiSizeBannerPlacementDelegate <AATAdDisplayDelegate, AATNoAdDelegate>
/// This method will be called when there is an ad
- (void)aatHaveAdWithBannerViewWithPlacement:(id <AATPlacement> _Nonnull)placement bannerView:(AATBannerPlacementWrapperView * _Nonnull)bannerView;
@end

enum VerticalAlign : NSInteger;
enum HorizontalAlign : NSInteger;

SWIFT_CLASS("_TtC6AATKit14AATBannerAlign")
@interface AATBannerAlign : NSObject
/// Banner vertical align of type <code>VerticalAlign</code>
@property (nonatomic, readonly) enum VerticalAlign verticalAlign;
/// Banner horizontal align of type <code>HorizontalAlign</code>
@property (nonatomic, readonly) enum HorizontalAlign horizontalAlign;
/// Creates a new instance of <code>AATBannerAlign</code>
/// \param horizontalAlign Banner horizontal align
///
/// \param verticalAlign Banner vertical align
///
- (nonnull instancetype)initWithHorizontalAlign:(enum HorizontalAlign)horizontalAlign verticalAlign:(enum VerticalAlign)verticalAlign OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HorizontalAlign, open) {
/// Align the banner to the leading edge of the superview
  HorizontalAlignLeading = 0,
/// Align the banner to the trailing edge of the superview
  HorizontalAlignTrailing = 1,
/// Align the banner to the center of the superview
  HorizontalAlignCenter = 2,
};

typedef SWIFT_ENUM(NSInteger, VerticalAlign, open) {
/// Align the banner to the top edge of the superview
  VerticalAlignTop = 0,
/// Align the banner to the bottom edge of the superview
  VerticalAlignBottom = 1,
/// Align the banner to the center of the superview
  VerticalAlignCenter = 2,
};

@protocol AATBannerCacheStatusDelegate;

/// A cache of automatically preloaded banner ads.
/// The cache will always try to have a defined amount of banners available for immediate handout to the app whenever they are needed. <em>Note:</em> The BannerCache needs to be destroyed when no longer needed.
SWIFT_PROTOCOL("_TtP6AATKit14AATBannerCache_")
@protocol AATBannerCache
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// The delegate that represents the cache status
@property (nonatomic, strong) id <AATBannerCacheStatusDelegate> _Nullable cacheStatusDelegate;
@property (nonatomic, strong) AATCollapsibleBannerOptions * _Nullable collapsableBannerOptions;
/// Updates the configuration that will be used when requesting new banners.
/// \param requestConfiguration AATBannerRequest instance
///
/// \param shouldRefresh True if the whole cache should be re-loaded with new banner request configuration, false if new configuration should only be used for new requests.
///
- (void)updateRequestConfiguration:(AATBannerRequest * _Nonnull)requestConfiguration shouldRefresh:(BOOL)shouldRefresh;
/// Returns an instance of <code>AATBannerPlacementWrapperView</code> to be used within the app. Also automatically counts an ad space.
/// BannerCache will no longer hold any references to returned banners, and they need to be destroyed manually by the app.
/// \param force true if cache should try to return banner ignoring the frequency capping set by <code>AATBannerCacheConfiguration/minDelay</code>.
///
///
/// returns:
/// Ad View to be displayed.
- (AATBannerPlacementWrapperView * _Nullable)consumeWithForce:(BOOL)force SWIFT_WARN_UNUSED_RESULT;
/// Returns an instance of <code>AATBannerPlacementWrapperView</code> to be used within the app. Also automatically counts an ad space. It will respect the frequency capping set by <code>AATBannerCacheConfiguration/minDelay</code>.
/// BannerCache will no longer hold any references to returned banners, and they need to be destroyed manually by the app.
///
/// returns:
/// Ad View to be displayed.
- (AATBannerPlacementWrapperView * _Nullable)consume SWIFT_WARN_UNUSED_RESULT;
/// Destroys the BannerCache, clearing all preloaded banner ads and canceling pending reload requests.
/// <ul>
///   <li>
///     For proper memory management, it needs to be called when the BannerCache is no longer needed.
///   </li>
///   <li>
///     Destroyed BannerCache can no longer be used
///   </li>
/// </ul>
- (void)destroy;
- (void)enableCreativeHistoryWithSize:(NSInteger)size;
- (void)getCreativeHistoryWithCompletion:(void (^ _Nonnull)(NSArray<AATPlacementHistoryInfo *> * _Nonnull))completion;
@end

@protocol AATBannerCacheDelegate;
@protocol AATBannerRequestDelegate;

/// A configuration object to be used when creating AATBannerCache
SWIFT_CLASS("_TtC6AATKit27AATBannerCacheConfiguration")
@interface AATBannerCacheConfiguration : NSObject
/// The banner cache delegate that would be notified with the first loaded banner
@property (nonatomic, weak) id <AATBannerCacheDelegate> _Nullable delegate;
/// An instance of <code>AATBannerRequestDelegate</code> that should provide the targeting information
@property (nonatomic, weak) id <AATBannerRequestDelegate> _Nullable bannerRequestDelegate;
/// A Bool that defines if the cache should load an additional ad at the beginning. False by default
@property (nonatomic) BOOL shouldCacheAdditionalAdAtStart;
/// An instance of AATBannerRequest that will be used in requesting banner ads from the AATInfeedBannerPlacement.
@property (nonatomic, strong) AATBannerRequest * _Nonnull requestConfiguration;
/// Represents the minimum delay between two banner consumptions in seconds
@property (nonatomic) NSTimeInterval minDelay;
/// Represents the failure retry interval in seconds.
@property (nonatomic) NSTimeInterval retryInterval;
/// Init the <code>AATBannerCacheConfiguration</code> object
/// \param placementName the placement name
///
/// \param size the desired cache size
///
- (nonnull instancetype)initWithPlacementName:(NSString * _Nonnull)placementName size:(NSInteger)size OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AATBannerCacheConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6AATKit22AATBannerCacheDelegate_")
@protocol AATBannerCacheDelegate
/// Will be called when the cache loads the first banner successfully
- (void)firstBannerLoaded;
@end


/// The delegate that represents the cache status
SWIFT_PROTOCOL("_TtP6AATKit28AATBannerCacheStatusDelegate_")
@protocol AATBannerCacheStatusDelegate
/// Will be called when the cache was empty and has been filled with at least one ad
- (void)cacheIsNoLongerEmpty;
/// Will be called when the cache was filled and has been consumed and became empty
- (void)cacheIsEmpty;
@end


/// Banner configuration class
SWIFT_CLASS("_TtC6AATKit22AATBannerConfiguration")
@interface AATBannerConfiguration : NSObject
@property (nonatomic) BOOL isManualAdSpaceCounting;
@property (nonatomic, strong) AATCollapsibleBannerOptions * _Nullable collapsableBannerOptions;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setNumberOfWorkers:(NSInteger)numberOfWorkers;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface AATBannerConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, AATBannerPlacementSize, open) {
  AATBannerPlacementSizeBanner320x53 = 0,
  AATBannerPlacementSizeBanner320x50 = 1,
  AATBannerPlacementSizeBanner375x50 = 2,
  AATBannerPlacementSizeBanner390x50 = 3,
  AATBannerPlacementSizeBanner414x50 = 4,
  AATBannerPlacementSizeBanner428x50 = 5,
  AATBannerPlacementSizeBanner768x90 = 6,
  AATBannerPlacementSizeBanner300x250 = 7,
  AATBannerPlacementSizeBanner468x60 = 8,
  AATBannerPlacementSizeBanner320x75 = 9,
  AATBannerPlacementSizeBanner320x100 = 10,
  AATBannerPlacementSizeBanner320x150 = 11,
  AATBannerPlacementSizeBanner320x160 = 12,
  AATBannerPlacementSizeBanner300x50 = 13,
  AATBannerPlacementSizeBanner320x480 = 14,
};

@class NSCoder;

SWIFT_CLASS("_TtC6AATKit29AATBannerPlacementWrapperView")
@interface AATBannerPlacementWrapperView : UIView
@property (nonatomic, strong) AATAdInfo * _Nullable adInfo;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)didMoveToSuperview;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The banner request that will be used by the infeed banner placement
SWIFT_CLASS("_TtC6AATKit16AATBannerRequest")
@interface AATBannerRequest : NSObject
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInformation;
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
@property (nonatomic, weak) id <AATBannerRequestDelegate> _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDelegate:(id <AATBannerRequestDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Update request sizes
/// \param sizes a set of <code>AATBannerSize</code>
///
- (void)setRequestBannerSizes:(NSSet<NSNumber *> * _Nonnull)sizes;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit24AATBannerRequestDelegate_")
@protocol AATBannerRequestDelegate
/// Check if the request should use the targeting information or not for an ad network
/// \param request an instance of <code>AATBannerRequest</code>
///
/// \param network an <code>AATAdNetwork</code>
///
- (BOOL)shouldUseTargetingFor:(AATBannerRequest * _Nonnull)request network:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
@end


/// Banner request error class
SWIFT_CLASS("_TtC6AATKit21AATBannerRequestError")
@interface AATBannerRequestError : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable errorDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATBannerSize, open) {
  AATBannerSizeBanner300x50 = 0,
  AATBannerSizeBanner320x53 = 1,
  AATBannerSizeBanner768x90 = 2,
  AATBannerSizeBanner300x250 = 3,
  AATBannerSizeBanner468x60 = 4,
  AATBannerSizeMultipleSizes = 5,
  AATBannerSizeBanner320x75 = 6,
  AATBannerSizeBanner320x100 = 7,
  AATBannerSizeBanner320x150 = 8,
  AATBannerSizeBanner320x160 = 9,
  AATBannerSizeBanner320x480 = 10,
  AATBannerSizeBanner728x90 = 11,
  AATBannerSizeBanner320x50 = 12,
  AATBannerSizeBanner375x50 = 13,
  AATBannerSizeBanner390x50 = 14,
  AATBannerSizeBanner414x50 = 15,
  AATBannerSizeBanner428x50 = 16,
};

enum AATManagedConsentState : NSInteger;

SWIFT_PROTOCOL("_TtP6AATKit14AATCMPDelegate_")
@protocol AATCMPDelegate
- (void)consentDidUpdate:(enum AATManagedConsentState)state;
- (void)CMPFailedToShowWith:(NSString * _Nonnull)error;
- (void)CMPFailedToLoadWith:(NSString * _Nonnull)error;
- (void)CMPNeedsUI;
- (void)didShowCMP;
@end

@class UIViewController;

SWIFT_PROTOCOL("_TtP6AATKit14AATCMPProtocol_")
@protocol AATCMPProtocol
- (BOOL)isSuccessfullyInitialized:(NSString * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (void)start:(NSString * _Nonnull)source;
- (void)setDelegate:(NSString * _Nonnull)source :(id <AATCMPDelegate> _Nonnull)delegate;
- (void)reload:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
- (void)showIfNeeded:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
- (void)editConsent:(NSString * _Nonnull)source :(UIViewController * _Nonnull)viewController;
@end

enum AATCollapsibleBannerPosition : NSInteger;

SWIFT_CLASS("_TtC6AATKit27AATCollapsibleBannerOptions")
@interface AATCollapsibleBannerOptions : NSObject
- (nonnull instancetype)initWithPosition:(enum AATCollapsibleBannerPosition)position minDelay:(NSInteger)minDelay OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATCollapsibleBannerPosition, open) {
  AATCollapsibleBannerPositionTop = 0,
  AATCollapsibleBannerPositionBottom = 1,
};

@class AATConsentImplementation;

/// AATKit Runtime Configurations
SWIFT_CLASS("_TtC6AATKit23AATRuntimeConfiguration")
@interface AATRuntimeConfiguration : NSObject
/// A Bool that indicates whether the consent is required or not. True by default. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/consent/general-handling">AATKit Consent Handling.</a>.
@property (nonatomic) BOOL consentRequired;
/// The consent implementation that the SDK will use. Could be an instance of: <code>AATManagedConsent</code>, <code>AATSimpleConsent</code> or <code>AATVendorConsent</code>. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/consent/general-handling">AATKit Consent Handling.</a>.
@property (nonatomic, strong) AATConsentImplementation * _Nonnull consent;
/// The AdQuality implementation that the SDK will use to verify ads.
@property (nonatomic, strong) id <AATAdQualityManagerProtocol> _Nullable adQualityManager;
/// A Bool that indicates whether the location usage is enabled or not. False by default.
@property (nonatomic) BOOL isUseGeoLocation;
/// Creates the AATRuntimeConfiguration object to be used when reconfiguring AATKit.
/// It will be automatically initialized with previously used values.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@protocol AATDelegate;

/// AATKit Configurations
SWIFT_CLASS("_TtC6AATKit16AATConfiguration")
@interface AATConfiguration : AATRuntimeConfiguration
/// Set this parameter to listen to <code>AATDelegate</code> callbacks.
@property (nonatomic, weak) id <AATDelegate> _Nullable delegate;
/// Set this parameter to let AATKit works with initial rules until downloading a new set.
@property (nonatomic, copy) NSString * _Nullable initialRules;
/// A Bool that indicates whether to cache downloaded rules or not.
@property (nonatomic) BOOL shouldCacheRules;
/// A Bool that indicates whether to skip ad networks that has no consent or not. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/consent/general-handling#rule-skipping">Rules Skipping</a>.
@property (nonatomic) BOOL shouldSkipRules;
/// A string that represents the test app bundleID. <em>Don’t forget to remove it before going live</em>.
@property (nonatomic, copy) NSString * _Nullable alternativeBundleId;
/// A Bool that indicates whether to use the <code>AATConfiguration/alternativeBundleId</code> in the reporting or not.
@property (nonatomic) BOOL shouldReportUsingAlternativeBundleId;
/// A NSNumber that represents the test account ID that enables you to test your AATKit integration. <em>Don’t forget to remove it before going live</em>. For more information, see <a href="https://addapptr.gitbook.io/ios-integration/start/initialization#test-mode">AATKit Test Mode</a>.
@property (nonatomic, strong) NSNumber * _Nullable testModeAccountId;
/// A Bool that enables/disables the shake debug screen. True by default. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/shake-debug">AATKit Debug Shake</a>.
@property (nonatomic) BOOL useDebugShake;
/// an Object that describe some advanced configuration for some AdNetworks
@property (nonatomic, strong) AATAdNetworksOptions * _Nullable adNetworksOptions;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATConfiguration (SWIFT_EXTENSION(AATKit))
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6AATKit24AATConsentImplementation")
@interface AATConsentImplementation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)setNoConsentNetworkStopSet:(NSSet<NSNumber *> * _Nonnull)stopSet;
@end


typedef SWIFT_ENUM(NSInteger, AATCurrency, open) {
  AATCurrencyUSD = 0,
  AATCurrencyEUR = 1,
  AATCurrencyUnknown = 2,
};


SWIFT_CLASS("_TtC6AATKit13AATDFPOptions")
@interface AATDFPOptions : NSObject
/// Init AATDFPOptions
/// \param inlineBannerMaxHeight The maximum height for DFP inline adaptive banners
///
- (nonnull instancetype)initWithInlineBannerMaxHeight:(NSInteger)inlineBannerMaxHeight OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6AATKit18AATDatonomyOptions")
@interface AATDatonomyOptions : NSObject
/// Init AATDatonomyOptions
/// \param datonomyAPIKey Datonomy API Key
///
- (nonnull instancetype)initWithDatonomyAPIKey:(NSString * _Nonnull)datonomyAPIKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PlacementDebugInfo;

SWIFT_CLASS("_TtC6AATKit12AATDebugInfo")
@interface AATDebugInfo : NSObject
@property (nonatomic, copy) NSString * _Nullable testBundleId;
@property (nonatomic, copy) NSString * _Nullable testId;
@property (nonatomic, copy) NSString * _Nullable consentInfo;
@property (nonatomic, copy) NSArray<PlacementDebugInfo *> * _Nonnull placementDebugInfo;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull extraSDK;
@property (nonatomic, copy) NSString * _Nonnull deviceType;
@property (nonatomic, copy) NSString * _Nullable idfaString;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull availableAdNetworks;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull disabledAdNetworks;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull removedAdNetworks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AATDebugInfo (SWIFT_EXTENSION(AATKit))
@end

@class FrequencyCappingDebugInfo;

SWIFT_CLASS("_TtCC6AATKit12AATDebugInfo18PlacementDebugInfo")
@interface PlacementDebugInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull placementName;
@property (nonatomic, copy) NSString * _Nonnull placementType;
@property (nonatomic, strong) FrequencyCappingDebugInfo * _Nullable activeFrequencyCapping;
@property (nonatomic) NSInteger bannerAutoReloadInterval;
@property (nonatomic) NSInteger initialDelay;
@property (nonatomic) NSInteger remainingTime;
@property (nonatomic, copy) NSArray<AATAdDebugInfo *> * _Nonnull loadedAds;
@property (nonatomic) BOOL isLoadingNewAd;
@property (nonatomic, strong) AATAdDebugInfo * _Nullable lastShownAd;
@property (nonatomic) BOOL isAdQualityActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Configure the shake debug screen
SWIFT_CLASS("_TtC6AATKit27AATDebugScreenConfiguration")
@interface AATDebugScreenConfiguration : NSObject
/// App Logo
@property (nonatomic, strong) UIImage * _Nullable appLogo;
/// Shake debug screen title
@property (nonatomic, copy) NSString * _Nullable title;
/// Show bundle identifier
@property (nonatomic) BOOL showBundleId;
/// Show test mode data
@property (nonatomic) BOOL showTestMode;
/// Show loaded/loading ads
@property (nonatomic) BOOL showLoadedAndLoadingAds;
/// Show disabled ad networks
@property (nonatomic) BOOL showDisabledNetworks;
/// Show removed ad networks
@property (nonatomic) BOOL showRemovedNetworkSDKs;
/// Show extra SDKs
@property (nonatomic) BOOL showExtraSDKs;
/// Show extra SDKs
@property (nonatomic) BOOL showConsent;
/// Show IDFA
@property (nonatomic) BOOL showIDFA;
/// Show device type
@property (nonatomic) BOOL showDeviceType;
@property (nonatomic, copy) NSString * _Nullable shareEmail;
/// Create an <code>AATDebugScreenConfiguration</code> instance
/// \param appLogo application logo
///
/// \param title title
///
/// \param showBundleId true to show bundle id
///
/// \param showTestMode true to show test mode data
///
/// \param showLoadedAndLoadingAds true to show loaded and loading ads
///
/// \param showDisabledNetworks true to show disabled ad networks
///
/// \param showRemovedNetworkSDKs true to show removed ad networks
///
/// \param showDeviceType true to show device type
///
/// \param showConsent true to show consent
///
/// \param showExtraSDKs true to show extra SDKs
///
/// \param showIDFA true to show IDFA
///
- (nonnull instancetype)initWithAppLogo:(UIImage * _Nullable)appLogo title:(NSString * _Nullable)title showBundleId:(BOOL)showBundleId showTestMode:(BOOL)showTestMode showLoadedAndLoadingAds:(BOOL)showLoadedAndLoadingAds showDisabledNetworks:(BOOL)showDisabledNetworks showRemovedNetworkSDKs:(BOOL)showRemovedNetworkSDKs showDeviceType:(BOOL)showDeviceType showExtraSDKs:(BOOL)showExtraSDKs showConsent:(BOOL)showConsent showIDFA:(BOOL)showIDFA OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Notifies about AATKit events.
SWIFT_PROTOCOL("_TtP6AATKit11AATDelegate_")
@protocol AATDelegate
@optional
/// Notifies that the AATKit has obtained ad rules.
/// \param fromTheServer Indicates if the rules came from the server. It will return false if the currently used rules come from the <code>AATSDK.setInitialRules(rules:)</code> method or the cached rules are used.
///
- (void)AATKitObtainedAdRulesFromTheServer:(BOOL)fromTheServer;
/// Notifies that application’s bundle ID was not recognized by the AddApptr server.
- (void)AATKitUnknownBundleId;
@end


SWIFT_CLASS("_TtC6AATKit19AATDisplayIOOptions")
@interface AATDisplayIOOptions : NSObject
- (nonnull instancetype)initWithShowSoundControl:(BOOL)showSoundControl interscrollerHeight:(NSInteger)interscrollerHeight interscrollerTopOffset:(NSInteger)interscrollerTopOffset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;

SWIFT_CLASS("_TtC6AATKit16AATFeedAdOptions")
@interface AATFeedAdOptions : NSObject
/// Init AATFeedAdOptions
/// \param shutterColor Desired UIColor to be used for shutter, default is nil.
///
/// \param disableSpinner Boolean that describes if spinner should be disabled, default is false.
///
- (nonnull instancetype)initWithShutterColor:(UIColor * _Nullable)shutterColor disableSpinner:(BOOL)disableSpinner OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6AATKit22AATFullscreenPlacement_")
@protocol AATFullscreenPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATFullscreenPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Sets the Ad Quality delegate that will be notified with ad verifications events.
@property (nonatomic, strong) id <AATAdQualityDelegate> _Nullable adQualityDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
@property (nonatomic, readonly, strong) AATAdInfo * _Nullable adInfo;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


typedef SWIFT_ENUM(NSInteger, AATGender, open) {
  AATGenderMale = 0,
  AATGenderFemale = 1,
  AATGenderOther = 2,
  AATGenderUnknown = 3,
};


SWIFT_CLASS("_TtC6AATKit20AATGraviteRTBOptions")
@interface AATGraviteRTBOptions : NSObject
/// Init AATGraviteRTBOptions
/// \param forceCloseButtonForMraid An option to force showing the SDK native close button even if the MRAID creative has one. If the MRAID creative has close button and <code>forceCloseButtonForMraid</code> is true, the MRAID creative would have 2 close buttons
///
- (nonnull instancetype)initWithForceCloseButtonForMraid:(BOOL)forceCloseButtonForMraid OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// An object contains impression level information.
SWIFT_CLASS("_TtC6AATKit13AATImpression")
@interface AATImpression : NSObject
/// Impression banner size
@property (nonatomic, readonly, copy) NSString * _Nullable bannerSize;
/// Impression ad network
@property (nonatomic, readonly) enum AATAdNetwork adNetwork;
/// Impression ad network key
@property (nonatomic, readonly, copy) NSString * _Nonnull networkKey;
/// Is a direct deal impression
@property (nonatomic, readonly) BOOL isDirectDeal;
/// Impression price information
@property (nonatomic, readonly, strong) AATPriceInfo * _Nullable priceInfo;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Gets the name of the impression ad network
///
/// returns:
/// A string represents the name of the ad network
- (NSString * _Nonnull)getAdNetworkName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Delegate called when the impression is counted.
SWIFT_PROTOCOL("_TtP6AATKit21AATImpressionDelegate_")
@protocol AATImpressionDelegate
/// Notifies that AATKit has counted an impression.
/// \param placement the placement that counted the impression
///
/// \param impression the AATImpression object
///
- (void)didCountImpressionWithPlacement:(id <AATPlacement> _Nullable)placement :(AATImpression * _Nonnull)impression;
@end


SWIFT_PROTOCOL("_TtP6AATKit24AATInfeedBannerPlacement_")
@protocol AATInfeedBannerPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATInfeedBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
@property (nonatomic, strong) AATCollapsibleBannerOptions * _Nullable collapsableBannerOptions;
/// Request banner ad from the placement
/// \param request the <code>AATBannerRequest</code> to be used
///
/// \param completion Completion result with <code>AATBannerPlacementWrapperView</code> or <code>AATBannerRequestError</code>
///
- (void)requestAdWithRequest:(AATBannerRequest * _Nonnull)request completion:(void (^ _Nonnull)(AATBannerPlacementWrapperView * _Nullable, AATBannerRequestError * _Nullable))completion;
/// Cancel a specific <code>AATBannerRequest</code>
/// \param request The request to be canceled
///
- (void)cancelWithRequest:(AATBannerRequest * _Nonnull)request;
/// Manually Count an Ad Space
- (void)countAdSpace;
- (void)enableCreativeHistoryWithSize:(NSInteger)size;
- (void)getCreativeHistoryWithCompletion:(void (^ _Nonnull)(NSArray<AATPlacementHistoryInfo *> * _Nonnull))completion;
@end


/// Conform to this protocol to listen to the AATInfeedBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit32AATInfeedBannerPlacementDelegate_")
@protocol AATInfeedBannerPlacementDelegate <AATAdDisplayDelegate>
@end



SWIFT_CLASS("_TtC6AATKit16AATLocationUtils")
@interface AATLocationUtils : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

@interface AATLocationUtils (SWIFT_EXTENSION(AATKit)) <CLLocationManagerDelegate>
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
@end


/// Desired log level
typedef SWIFT_ENUM(NSInteger, AATLogLevel, open) {
/// Verbose-level messages are intended to capture verbose, debug, info, warning and error messages. It’s convenient in an intensive development environment.
  AATLogLevelVerbose = 1,
/// Debug-level messages are intended to capture debug, info, warning and error messages. It’s convenient in a normal development environment.
  AATLogLevelDebug = 2,
/// Info-level messages are intended to capture info, warning and error messages. Info-level may be helpful but isn’t enough for troubleshooting.
  AATLogLevelInfo = 3,
/// Warn-level messages are intended to capture warning and error messages only.
  AATLogLevelWarn = 4,
/// Error-level messages are intended to capture error messages only.
  AATLogLevelError = 5,
};


SWIFT_CLASS("_TtC6AATKit9AATLogger")
@interface AATLogger : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol AATManagedConsentDelegate;
enum AATShowIfNeededSetting : NSInteger;

/// The managed consent (should be initialized with <code>AATCMPProtocol</code>). Will fire the different events of the user consent interactions. See <code>AATManagedConsentDelegate</code>. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/consent/managed-consent">Managed Consent</a>.
SWIFT_CLASS("_TtC6AATKit17AATManagedConsent")
@interface AATManagedConsent : AATConsentImplementation
/// Create an instance of <code>AATManagedConsent</code>. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/consent/managed-consent">Managed Consent</a>.
/// \param cmp an instance of <code>AATCMPProtocol</code>. currently either AATCMPGoogle or AATCMPSourcePoint
///
/// \param delegate The delegate that will be notified about CMP events. Must not be null.
///
/// \param showIfNeededSetting an <code>AATShowIfNeededSetting</code> case that specify the consent dialog showing options.
///
- (nullable instancetype)initWithCmp:(id <AATCMPProtocol> _Nullable)cmp delegate:(id <AATManagedConsentDelegate> _Nonnull)delegate showIfNeededSetting:(enum AATShowIfNeededSetting)showIfNeededSetting OBJC_DESIGNATED_INITIALIZER;
/// Presents the consent screen ONLY if it is required by the used CMP (for example if no user consent has been set yet). It is advised always to call this method when the first app controller is presented.
/// \param viewController a view controller instance that will be used to present the CMP
///
- (void)showIfNeeded:(UIViewController * _Nonnull)viewController;
/// Re-show the CMP if it is needed to be shown OR the user has rejected the consent
/// \param viewController a view controller instance that will be used to present the CMP
///
/// \param daysAgo Minimum number of days that should be passed before re-showing the CMP
///
- (void)showIfNeededOrRejectedWithDaysAgo:(NSInteger)daysAgo viewController:(UIViewController * _Nonnull)viewController;
/// Presents the consent screen, allowing the user to change consent settings
/// \param viewController a view controller instance that will be used to present the CMP
///
- (void)editConsent:(UIViewController * _Nonnull)viewController;
/// Tells the CMP to reload. It does not need to be used unless some error occurs. You can call this method for example after receiving <code>CMPFailedToLoad(with:)</code>.
/// \param viewController a view controller instance that will be used to present the CMP
///
- (void)reload:(UIViewController * _Nonnull)viewController;
@end


@interface AATManagedConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface AATManagedConsent (SWIFT_EXTENSION(AATKit)) <AATCMPDelegate>
- (void)didShowCMP;
- (void)consentDidUpdate:(enum AATManagedConsentState)state;
- (void)CMPFailedToShowWith:(NSString * _Nonnull)error;
- (void)CMPFailedToLoadWith:(NSString * _Nonnull)error;
- (void)CMPNeedsUI;
@end


SWIFT_PROTOCOL("_TtP6AATKit25AATManagedConsentDelegate_")
@protocol AATManagedConsentDelegate
/// CMP is ready and needs to be shown
/// \param managedConsent an instance of <code>AATManagedConsent</code>.
///
- (void)managedConsentNeedsUserInterface:(AATManagedConsent * _Nonnull)managedConsent;
/// The user finished his consent choice
/// \param state an instance of the <code>AATManagedConsentState</code> enum.
///
- (void)managedConsentCMPFinishedWith:(enum AATManagedConsentState)state;
/// The managed consent failed to load the CMP
/// \param managedConsent an instance of <code>AATManagedConsent</code>.
///
/// \param error a String represents the loading error.
///
- (void)managedConsentCMPFailedToLoad:(AATManagedConsent * _Nonnull)managedConsent with:(NSString * _Nonnull)error;
/// The managed consent failed to show the CMP
/// \param managedConsent an instance of <code>AATManagedConsent</code>.
///
/// \param error a String represents the showing error.
///
- (void)managedConsentCMPFailedToShow:(AATManagedConsent * _Nonnull)managedConsent with:(NSString * _Nonnull)error;
@end

typedef SWIFT_ENUM(NSInteger, AATManagedConsentState, open) {
/// No information about consent state.
  AATManagedConsentStateUnknown = 0,
/// Consent has been declined by the user.
  AATManagedConsentStateWithheld = 1,
/// Partial consent has been granted by the user - at least some purposes and some vendors were given consent.
  AATManagedConsentStateCustom = 2,
/// Full consent has been granted by the user.
  AATManagedConsentStateObtained = 3,
};

/// <ul>
///   <li>
///     AATKit rule mediation type
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, AATMediationType, closed) {
  AATMediationTypeWATERFALL = 1,
  AATMediationTypeAUCTION = 2,
  AATMediationTypeMAYO = 3,
};

@protocol AATMultiSizeBannerPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit27AATMultiSizeBannerPlacement_")
@protocol AATMultiSizeBannerPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATMultiSizeBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
@property (nonatomic, strong) AATCollapsibleBannerOptions * _Nullable collapsableBannerOptions;
/// Start the automatic reloading of the placement
- (void)startAutoReload;
/// Start the automatic reloading of the placement using specific time interval
- (void)startAutoReloadWithSeconds:(NSTimeInterval)seconds;
/// Stop the automatic reloading of the placement
- (void)stopAutoReload;
/// Set the placement auto reload interval
/// \param seconds auto reload interval
///
- (void)setAutoreloadIntervalWithSeconds:(NSTimeInterval)seconds;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
/// \param forceLoad True if you want to be able to reload and show new banner before set banner reload interval (default: 30s) between reloads, false otherwise.
///
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reloadWithForceLoad:(BOOL)forceLoad SWIFT_WARN_UNUSED_RESULT;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reload SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded for given placement.
///
/// returns:
/// True if there is an ad loaded for given placement.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
/// Enables keeping creatives history
/// \param size Maximum number of creatives to keep
///
- (void)enableCreativeHistoryWithSize:(NSInteger)size;
/// Get saved creatives history
/// \param completion An array of <code>AATPlacementHistoryInfo</code> representing creatives history
///
- (void)getCreativeHistoryWithCompletion:(void (^ _Nonnull)(NSArray<AATPlacementHistoryInfo *> * _Nonnull))completion;
@end


/// Conform to this protocol to listen to the AATMultiSizeBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit35AATMultiSizeBannerPlacementDelegate_")
@protocol AATMultiSizeBannerPlacementDelegate <AATAdDisplayDelegate, AATNoAdDelegate>
/// This method will be called when there is an ad
- (void)aatHaveAdWithBannerViewWithPlacement:(id <AATPlacement> _Nonnull)placement bannerView:(AATBannerPlacementWrapperView * _Nonnull)bannerView;
@end

@class AATNativeAdRating;

SWIFT_PROTOCOL("_TtP6AATKit15AATNativeAdData_")
@protocol AATNativeAdData <NSObject>
/// A String represents the title of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// A String represents the description of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable adDescription;
/// A String represents the call-to-action of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable callToAction;
/// A String represents the URL of the image asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
/// A String represents the URL of the icon asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable iconUrl;
/// A NativeAdRating instance containing both value and scale of rating, or null if it is not available.
@property (nonatomic, readonly, strong) AATNativeAdRating * _Nullable rating;
/// A view represents the branding logo or ad information related to the ad network providing the native ad.
/// Some networks like Facebook Audience Network or Flurry require this special view to be visible on native ads.
@property (nonatomic, readonly, strong) UIView * _Nullable brandingLogo;
/// A String represents the advertiser asset of the ad, or null if it is not available.
@property (nonatomic, readonly, copy) NSString * _Nullable advertiser;
/// An AATAdNetwork represents the ad network providing the given native ad
@property (nonatomic, readonly) enum AATAdNetwork network;
@property (nonatomic, readonly, strong) AATAdInfo * _Nullable adInfo;
/// Binds this native ad instance with given ViewGroup. Needed for click handling and tracking.
/// \param view View used to render the native ad.
///
/// \param mainImageView View used to show the main image of the ad. Can be null.
///
/// \param iconView View used to show the icon of the native ad.
///
/// \param ctaView View used to show the Call To Action of the native ad.
///
- (void)attachToView:(UIView * _Nonnull)view mainImageView:(UIView * _Nullable)mainImageView iconView:(UIView * _Nullable)iconView ctaView:(UIView * _Nullable)ctaView;
/// Removes the binding between the native ad and superview.
/// Should be called when the native ad will no longer be presented and will be removed from the view hierarchy.
- (void)detachFromLayout;
/// A Bool tells if the native ad has expired and shall no longer be used.
- (BOOL)isExpired SWIFT_WARN_UNUSED_RESULT;
/// A Bool tells if the native ad is ready to be displayed.
- (BOOL)isReady SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AATNativePlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit20AATNativeAdPlacement_")
@protocol AATNativeAdPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events.
@property (nonatomic, strong) id <AATNativePlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Requests placement reload.
- (BOOL)reload;
/// Returns how many ads are currently loading for given native ad placement.
///
/// returns:
/// Number of ads that are currently loading for given placement.
- (NSInteger)getNumberOfCurrentlyLoadingNativeAds SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Manually Count an Ad Space
- (BOOL)reportAdSpace SWIFT_WARN_UNUSED_RESULT;
/// Returns the instance of native ad for given native ad placement.
///
/// returns:
/// Native ad instance if it is loaded for given placement, null otherwise.
- (id <AATNativeAdData> _Nullable)getNativeAd SWIFT_WARN_UNUSED_RESULT;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Native ad rating
SWIFT_CLASS("_TtC6AATKit17AATNativeAdRating")
@interface AATNativeAdRating : NSObject
/// Creates an instance of <code>AATNativeAdRating</code>
/// \param value The rating value
///
/// \param scale The rating scale
///
- (nonnull instancetype)initWithValue:(double)value scale:(double)scale OBJC_DESIGNATED_INITIALIZER;
/// The rating value
@property (nonatomic, readonly) double value;
/// The rating scale
@property (nonatomic, readonly) double scale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATNativeAdType, open) {
  AATNativeAdTypeAppInstall = 0,
  AATNativeAdTypeContent = 1,
  AATNativeAdTypeVideo = 2,
  AATNativeAdTypeUnified = 3,
  AATNativeAdTypeOther = 4,
  AATNativeAdTypeUnknown = 5,
};


/// Conform to this protocol to listen to the AATNativePlacement events
SWIFT_PROTOCOL("_TtP6AATKit26AATNativePlacementDelegate_")
@protocol AATNativePlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end




SWIFT_CLASS("_TtC6AATKit23AATPlacementHistoryInfo")
@interface AATPlacementHistoryInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull networkName;
@property (nonatomic, copy) NSString * _Nonnull networkKey;
@property (nonatomic) NSTimeInterval timestamp;
@property (nonatomic, strong) UIImage * _Nullable snapshot;
@property (nonatomic, copy) NSString * _Nullable creativeID;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, AATPluginName, open) {
  AATPluginNameAdobe = 1,
  AATPluginNameCorona = 2,
  AATPluginNameMarmalade = 3,
  AATPluginNameUnity = 4,
  AATPluginNameXamarin = 5,
  AATPluginNameReactNative = 6,
  AATPluginNameCordova = 7,
  AATPluginNameCapacitor = 8,
  AATPluginNameFlutter = 9,
};


SWIFT_CLASS("_TtC6AATKit23AATPluginVersioningTool")
@interface AATPluginVersioningTool : NSObject
+ (void)appendPluginInformation:(enum AATPluginName)pluginName patchLevel:(NSString * _Nonnull)patchLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum AATPricePrecisionType : NSInteger;

SWIFT_CLASS("_TtC6AATKit12AATPriceInfo")
@interface AATPriceInfo : NSObject
/// Impression CPM price
@property (nonatomic) double price;
/// Impression precision type
@property (nonatomic) enum AATPricePrecisionType precision;
/// Impression currency
@property (nonatomic) enum AATCurrency currency;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, AATPricePrecisionType, open) {
/// Unknown precision type
  AATPricePrecisionTypeUnknown = 0,
/// Estimated precision type
  AATPricePrecisionTypeEstimated = 1,
/// Floor price precision type
  AATPricePrecisionTypeFloor = 2,
/// Publish provided precision type
  AATPricePrecisionTypePublisherProvided = 3,
/// Precise precision type
  AATPricePrecisionTypeExact = 4,
};


/// Will be notified with reports event
SWIFT_PROTOCOL("_TtP6AATKit18AATReportsDelegate_")
@protocol AATReportsDelegate
/// Notifies you of AATKit reports event.
/// \param report The report content.
///
- (void)onReportSent:(NSString * _Nonnull)report;
@end


/// The rewarded video incentive reward object
SWIFT_CLASS("_TtC6AATKit9AATReward")
@interface AATReward : NSObject
/// String represents the reward name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// String represents the reward value
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Creates an instance of <code>AATReward</code>
/// \param name The reward name
///
/// \param value The reward value
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An object contains rewarded videos server-side verification data
SWIFT_CLASS("_TtC6AATKit20AATRewardedAdSSVInfo")
@interface AATRewardedAdSSVInfo : NSObject
/// Impression user id
@property (nonatomic, copy) NSString * _Nonnull userId;
/// Custom string
@property (nonatomic, copy) NSString * _Nullable customString;
/// Create <code>AATRewardedAdSSVInfo</code> instance
/// \param userId user id
///
/// \param customString custom string
///
- (nonnull instancetype)initWithUserId:(NSString * _Nonnull)userId customString:(NSString * _Nullable)customString OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AATRewardedVideoPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit25AATRewardedVideoPlacement_")
@protocol AATRewardedVideoPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATRewardedVideoPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
/// Sets the Ad Quality delegate that will be notified with ad verifications events.
@property (nonatomic, strong) id <AATAdQualityDelegate> _Nullable adQualityDelegate;
/// Start the automatic reloading of the placement.
/// When using this method, the placement will automatically once the current loaded ad has been shown.
- (void)startAutoReload;
/// Stop the automatic reloading of the placement.
- (void)stopAutoReload;
/// Requests placement reload.
/// Works only if automatic reloading is disabled. In this case, the placement will not request a new ad after showing the current loaded one.
- (BOOL)reload;
/// Returns true if there is an ad loaded.
///
/// returns:
/// True if there is an ad loaded.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Shows the fullscreen ad if ad is ready.
///
/// returns:
/// True if showing fullscreen was successful, false otherwise.
- (BOOL)show;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
@property (nonatomic, readonly, strong) AATAdInfo * _Nullable adInfo;
/// Checks if the frequency cap has been reached.
///
/// returns:
/// true if the frequency cap has been reached.
- (BOOL)isFrequencyCapReached SWIFT_WARN_UNUSED_RESULT;
@end


/// Conform to this protocol to listen to the AATRewardedVideoPlacement events
SWIFT_PROTOCOL("_TtP6AATKit33AATRewardedVideoPlacementDelegate_")
@protocol AATRewardedVideoPlacementDelegate <AATFullscreenPlacementDelegate>
/// This method will be called when the user gets rewarded
- (void)aatUserEarnedIncentiveWithPlacement:(id <AATPlacement> _Nonnull)placement aatReward:(AATReward * _Nonnull)aatReward;
@end



@interface AATRuntimeConfiguration (SWIFT_EXTENSION(AATKit)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@protocol AATStickyBannerPlacement;
@class AATUserTargeting;

/// AATKit main class that has the main public static methods
SWIFT_CLASS("_TtC6AATKit6AATSDK")
@interface AATSDK : NSObject
/// Get AATKit version
///
/// returns:
/// AATKit version.
+ (NSString * _Nonnull)getVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the AATKit SDK. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/initialization">AATKit Initialization</a>.
/// Should be called once during application initialization before any other calls to AATKit.
/// \param configuration Configuration for AATKit. see <code>AATConfiguration</code>.
///
+ (void)initAATKitWith:(AATConfiguration * _Nullable)configuration SWIFT_METHOD_FAMILY(none);
/// Enables debug screen that will show after shaking the device. It is already enabled by default. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/shake-debug">AATKit Shake Debug Screen</a>.
+ (void)enableDebugScreen;
/// Disables the debug screen appearing after shaking the device. It is enabled by default.  For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/shake-debug">AATKit Shake Debug Screen</a>.
+ (void)disableDebugScreen;
/// Used for obtaining debug information (the same that would be presented in dialog after shaking the device if debug screen is enabled)
///
/// returns:
/// String with debug information
+ (NSString * _Nonnull)getDebugInfo SWIFT_WARN_UNUSED_RESULT;
/// Configure the debug screen that will be shown after shaking the device. If not called, the default values of <code>AATDebugScreenConfiguration</code> will be used
/// \param configuration an instance of <code>AATDebugScreenConfiguration</code>
///
+ (void)configureDebugScreenWithConfiguration:(AATDebugScreenConfiguration * _Nonnull)configuration;
/// Used for obtaining debug information (the same that would be presented in dialog after shaking the device if debug screen is enabled)
///
/// returns:
/// <code>AATDebugInfo</code>
+ (AATDebugInfo * _Nullable)getDebugInfoObject SWIFT_WARN_UNUSED_RESULT;
/// Gets the current SDK log level
///
/// returns:
/// The current <code>AATLogLevel</code> of the SDK
+ (enum AATLogLevel)getLogLevel SWIFT_WARN_UNUSED_RESULT;
/// Allows to reconfigure the options for GDPR consent. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/initialization#reconfigure-aatkit">Reconfigure AATKit</a>.
/// \param configuration New configuration. 
///
+ (void)reconfigureWithConfiguration:(AATRuntimeConfiguration * _Nonnull)configuration;
/// Checks if AATKit recognizes given device as tablet.
///
/// returns:
/// True if device is recognized as tablet, false otherwise.
+ (BOOL)isTablet SWIFT_WARN_UNUSED_RESULT;
/// Get the <code>AATBannerPlacementSize</code> with maximum width that will fit on a given device in portrait screen orientation.
///
/// returns:
/// <code>AATBannerPlacementSize</code> best fitting current device
+ (enum AATBannerPlacementSize)maximumBannerSizePortrait SWIFT_WARN_UNUSED_RESULT;
/// Returns the <code>AATBannerPlacementSize</code> with maximum width that will fit on a given device in landscape screen orientation.
///
/// returns:
/// <code>AATBannerPlacementSize</code> best fitting current device
+ (enum AATBannerPlacementSize)maximumBannerSizeLandscape SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)fittingBannerSizesPortrait SWIFT_WARN_UNUSED_RESULT;
+ (NSSet<NSString *> * _Nonnull)fittingBannerSizesLandscape SWIFT_WARN_UNUSED_RESULT;
/// Notifies AATKit about viewController viewDidAppear. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/formats/general#handling-multiple-view-controllers">Handling View Controllers</a>.
/// <em>NOTE:</em> This method will update the view controller for all existing placements
/// \param controller the UIViewController that did appear
///
+ (void)controllerViewDidAppearWithController:(UIViewController * _Nonnull)controller;
/// Notifies AATKit about the current controller disappear. Invoke this method in every controller that uses AATKit. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/formats/general#handling-multiple-view-controllers">Handling View Controllers</a>.
+ (void)controllerViewWillDisappear;
/// Creates placement with given name and size.
/// If the placement of given name and size already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param size Size of placement. Use <code>AATBannerPlacementSize</code>.
///
///
/// returns:
/// <code>AATStickyBannerPlacement</code> instance, or nil if placement cannot be created.
+ (id <AATStickyBannerPlacement> _Nullable)createStickyBannerPlacementWithName:(NSString * _Nonnull)name size:(enum AATBannerPlacementSize)size SWIFT_WARN_UNUSED_RESULT;
/// Creates a multi-size banner placement
/// \param name placement name
///
///
/// returns:
/// <code>AATMultiSizeBannerPlacement</code> instance, or nil if placement cannot be created.
+ (id <AATMultiSizeBannerPlacement> _Nullable)createMultiSizeBannerPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates placement with given name and size.
/// If the placement of given name and size already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param size Size of placement. Use <code>AATBannerPlacementSize</code>.
///
///
/// returns:
/// <code>AATAutoLoadBannerPlacement</code> instance, or nil if placement cannot be created.
+ (id <AATAutoLoadBannerPlacement> _Nullable)createAutoLoadBannerPlacementWithName:(NSString * _Nonnull)name size:(enum AATBannerPlacementSize)size SWIFT_WARN_UNUSED_RESULT;
/// Creates a multi-size banner placement
/// \param name placement name
///
///
/// returns:
/// <code>AATMultiSizeBannerPlacement</code> instance, or nil if placement cannot be created.
+ (id <AATAutoLoadMultiSizeBannerPlacement> _Nullable)createAutoLoadMultiSizeBannerPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates a new banner placement. If the banner placement of given name already exists, it will be returned.
/// The placement will create a copy of the configuration.Any changes made to the configuration after placement is created will be ignored.
/// The placement will ignore any changes made to configuration after it was created.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param configuration The <code>AATBannerConfiguration</code> for this placement.
///
///
/// returns:
/// Banner placement instance, or null if the placement cannot be created.
+ (id <AATInfeedBannerPlacement> _Nullable)createInfeedBannerPlacementWithName:(NSString * _Nonnull)name configuration:(AATBannerConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
/// Creates a new fullscreen ad placement.
/// If the fullscreen ad placement of given name already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATFullscreenPlacement, or nil if placement cannot be created.
+ (id <AATFullscreenPlacement> _Nullable)createFullscreenPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates a new rewarded video placement.
/// If the rewarded video ad placement of given name already exists, it will be returned.
/// Only one Rewarded Video placement can be used within the app.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATPlacement, or nil if placement cannot be created.
+ (id <AATRewardedVideoPlacement> _Nullable)createRewardedVideoPlacementWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Creates a new AppOpen placement.
/// <em>NOTE:</em> You should register your <code>placementName</code> on the AddApptr website
/// if you intend to target it with specific rules.
/// \param placementName Unique name of placement. The same name will be used in addapptr.com account.
///
///
/// returns:
/// AATAppOpenAdPlacement, or nil if placement cannot be created.
+ (id <AATAppOpenAdPlacement> _Nullable)createAppOpenAdPlacementWithPlacementName:(NSString * _Nonnull)placementName SWIFT_WARN_UNUSED_RESULT;
/// Creates a new native ad placement.
/// If the native ad placement of given name already exists, it will be returned.
/// \param name Unique name of placement. The same name will be used in addapptr.com account.
///
/// \param supportsMainImage True if the native ads returned should have main image asset. Keep in mind that if main image is used, it has to be displayed.
///
///
/// returns:
/// AATPlacement, or nil if placement cannot be created.
+ (id <AATNativeAdPlacement> _Nullable)createNativeAdPlacementWithName:(NSString * _Nonnull)name supportsMainImage:(BOOL)supportsMainImage SWIFT_WARN_UNUSED_RESULT;
+ (id <AATBannerCache> _Nullable)createBannerCacheWithConfiguration:(AATBannerCacheConfiguration * _Nonnull)configuration SWIFT_WARN_UNUSED_RESULT;
/// Set NativeAd icon position.
/// Set NativeAd icon position. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/formats/native-ads/network-specifics/native-ads-google#change-native-ad-aatadchoicesiconposition">Change Native Ad AATAdChoicesIconPosition</a>.
+ (void)setAdChoicesIconPositionWithPosition:(enum AATAdChoicesIconPosition)position;
/// Allows to enable or disable selected ad networks. By default all networks are enabled. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/disabling-ad-networks">Disable/Enable Ad Networks</a>.
/// \param network Ad network.
///
/// \param enabled True to enable, false to disable.
///
+ (void)setNetworkEnabledWithNetwork:(enum AATAdNetwork)network enabled:(BOOL)enabled;
/// Returns true if ad network is enabled, false otherwise.
/// \param network Ad network.
///
///
/// returns:
/// True if ad network is enabled, false otherwise.
+ (BOOL)isNetworkEnabledWithNetwork:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
/// Get option from AATKit.
/// Options can be obtained from the server or set using the <code>setOption(optionName:optionValue:)</code> method.
/// \param optionName The name of the option to be checked.
///
///
/// returns:
/// Value of the option or null if it is not set.
+ (NSString * _Nullable)getOptionWithOptionName:(NSString * _Nonnull)optionName SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for checking if option is enabled in AATKit.
/// Options can be obtained from the server or set using the <code>setOption(optionName:optionValue:)</code> method.
/// \param optionName The name of the option to be checked.
///
///
/// returns:
/// True if option value is “Yes”, false otherwise.
+ (BOOL)isOptionEnabledWithOptionName:(NSString * _Nonnull)optionName SWIFT_WARN_UNUSED_RESULT;
/// Set option in AATKit. Options can also be obtained from the server.
/// \param optionName The name of the option to be set.
///
/// \param optionValue The value of the option to be set.
///
+ (void)setOptionWithOptionName:(NSString * _Nonnull)optionName optionValue:(NSString * _Nonnull)optionValue;
/// Sets the targeting information for the application. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/targeting">AATKit Targeting</a>.
/// This information will be used only if no placement-specific targeting is available.
/// \param info Map with targeting information.
///
+ (void)setTargetingInfoWithInfo:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)info;
/// Sets the user targeting information for the application.
/// see
/// \param userTargeting an instance of <code>AATUserTargeting</code>.
///
+ (void)setUserTargetingWithUserTargeting:(AATUserTargeting * _Nonnull)userTargeting;
/// Sets the content targeting url for the application. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/targeting#set-global-targeting-keywords">Set Global Content Targeting URL</a>.
/// This information will be used only if no placement-specific targeting is available.
/// \param targetingUrl The targeting url
///
+ (void)setContentTargetingUrlWithTargetingUrl:(NSString * _Nonnull)targetingUrl;
/// Adds an ad network to the list of ad networks that receive targeting keywords (if any set).
/// Adds an ad network to the list of ad networks that receive targeting keywords (if any set). For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/targeting#limit-ad-network-specific-keywords">Limit Ad Network specific Keywords</a>.
/// \param network Chosen ad network.
///
+ (void)addAdNetworkForKeywordTargetingWithNetwork:(enum AATAdNetwork)network;
/// Removes an ad network from the list of ad networks that receive targeting keywords (if any set). For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/targeting#limit-ad-network-specific-keywords">Limit Ad Network specific Keywords</a>.
/// If no ad networks are added to the list, any set keywords will be delivered to all ad networks supporting keyword targeting.
/// \param network Chosen ad network.
///
+ (void)removeAdNetworkForKeywordTargetingWithNetwork:(enum AATAdNetwork)network;
/// Allows to set log level from code. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/initialization#log-levels">Use Log Levels</a>.
/// \param logLevel Desired log level, as in <code>AATLogLevel</code> enum.
///
+ (void)setLogLevelWithLogLevel:(enum AATLogLevel)logLevel;
/// Mute video ads for ad networks which support muting video ads
/// \param isMuted A bool to mute or not
///
+ (void)setVideoAdsMuted:(BOOL)isMuted;
+ (void)setIsChildDirected:(BOOL)isChildDirected;
/// Sets the reports delegate that will receive reporting event callbacks. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/advanced/advanced-delegates/reports-delegate">Reports Delegate</a>.
/// \param delegate the object that will receive reporting event callbacks
///
+ (void)setReportsDelegate:(id <AATReportsDelegate> _Nonnull)delegate;
/// Checks if consent is opt-in or not
///
/// returns:
/// True if consent is opt-in
+ (BOOL)isConsentOptIn SWIFT_WARN_UNUSED_RESULT;
+ (void)setRewardedAdSSVInfoWithInfo:(AATRewardedAdSSVInfo * _Nonnull)info;
@end



/// An enum to specify when to show the consent dialog.
typedef SWIFT_ENUM(NSInteger, AATShowIfNeededSetting, open) {
/// Always show the consent dialog.
  AATShowIfNeededSettingAlways = 0,
/// Never show the consent dialog.
  AATShowIfNeededSettingNever = 1,
/// Show the consent dialog depending on server (rules).
  AATShowIfNeededSettingServerSideControl = 2,
};

enum NonIABConsent : NSInteger;

/// Allows to set the status of Non-IAB consent. Will also read the IAB consent string and CCPA string from SharedPreferences if available.
/// see <code>init(nonIABConsent:)</code>
SWIFT_CLASS("_TtC6AATKit16AATSimpleConsent")
@interface AATSimpleConsent : AATConsentImplementation
/// Initialize a simple consent instance. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/consent/simple-consent">Simple Consent</a>.
/// \param nonIABConsent a <code>NonIABConsent</code> value
///
- (nonnull instancetype)initWithNonIABConsent:(enum NonIABConsent)nonIABConsent OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATSimpleConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit21AATStatisticsDelegate_")
@protocol AATStatisticsDelegate
/// Notifies that an ad space has been counted.
/// \param placement the placement that counted the ad space
///
- (void)AATKitCountedAdSpaceWithPlacement:(id <AATPlacement> _Nullable)placement;
/// Notifies that a request has been counted for a given network.
/// \param placement the placement that counted the request
///
/// \param network Network for which the request has been counted.
///
- (void)AATKitCountedRequestWithPlacement:(id <AATPlacement> _Nullable)placement for:(enum AATAdNetwork)network;
/// Notifies that a response has been counted for a given network.
/// \param placement the placement that counted the response
///
/// \param network Network for which the response has been counted.
///
- (void)AATKitCountedResponseWithPlacement:(id <AATPlacement> _Nullable)placement for:(enum AATAdNetwork)network;
/// Notifies that an impression has been counted for a given network.
/// \param placement the placement that counted the impression
///
/// \param network Network for which the impression has been counted.
///
- (void)AATKitCountedImpressionWithPlacement:(id <AATPlacement> _Nullable)placement for:(enum AATAdNetwork)network;
/// Notifies that a <em>network</em> impression has been counted for a given network.
/// \param placement the placement that counted network impression
///
/// \param network Network for which the <em>network</em> impression has been counted.
///
- (void)AATKitCountedNetworkImpressionWithPlacement:(id <AATPlacement> _Nullable)placement for:(enum AATAdNetwork)network;
/// Notifies that a viewable impression has been counted for a given network.
/// \param placement the placement that counted the viewable impression
///
/// \param network Network for which the viewable impression has been counted.
///
- (void)AATKitCountedVImpressionWithPlacement:(id <AATPlacement> _Nullable)placement for:(enum AATAdNetwork)network;
/// Notifies that a click has been counted for a given network.
/// \param placement the placement that counted the click
///
/// \param network Network for which the click has been counted.
///
- (void)AATKitCountedClickWithPlacement:(id <AATPlacement> _Nullable)placement for:(enum AATAdNetwork)network;
/// Notifies that a direct deal impression has been counted for a given network.
/// \param placement the placement that counted the direct deal impression
///
/// \param network Network for which the direct deal impression has been counted.
///
- (void)AATKitCountedDirectDealImpressionWithPlacement:(id <AATPlacement> _Nullable)placement for:(enum AATAdNetwork)network;
/// Notifies that a mediation cycle has been counted.
/// \param placement the placement that counted the mediation cycle
///
- (void)AATKitCountedMediationCycleWithPlacement:(id <AATPlacement> _Nullable)placement;
@end

@protocol AATStickyBannerPlacementDelegate;

SWIFT_PROTOCOL("_TtP6AATKit24AATStickyBannerPlacement_")
@protocol AATStickyBannerPlacement <AATPlacement>
/// Set the placement delegate that will listen to ad loading and display events
@property (nonatomic, strong) id <AATStickyBannerPlacementDelegate> _Nullable delegate;
/// Sets the placement statistics delegate
@property (nonatomic, strong) id <AATStatisticsDelegate> _Nullable statisticsDelegate;
/// Sets the placement impression delegate
@property (nonatomic, strong) id <AATImpressionDelegate> _Nullable impressionDelegate;
@property (nonatomic, strong) AATCollapsibleBannerOptions * _Nullable collapsableBannerOptions;
/// Start the automatic reloading of the placement
- (void)startAutoReload;
/// Start the automatic reloading of the placement using specific time interval
- (void)startAutoReloadWithSeconds:(NSTimeInterval)seconds;
/// Stop the automatic reloading of the placement
- (void)stopAutoReload;
/// Set the placement auto reload interval
/// \param seconds auto reload interval
///
- (void)setAutoreloadIntervalWithSeconds:(NSTimeInterval)seconds;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
/// \param forceLoad True if you want to be able to reload and show new banner before set banner reload interval (default: 30s) between reloads, false otherwise.
///
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reloadWithForceLoad:(BOOL)forceLoad SWIFT_WARN_UNUSED_RESULT;
/// Requests placement reload.
/// Works only if automatic reloading is disabled.
///
/// returns:
/// Bool if reload started and false otherwise.
- (BOOL)reload SWIFT_WARN_UNUSED_RESULT;
/// Returns true if there is an ad loaded for given placement.
///
/// returns:
/// True if there is an ad loaded for given placement.
- (BOOL)hasAd SWIFT_WARN_UNUSED_RESULT;
/// Returns placement view. Works only for banner placements.
///
/// returns:
/// Placement view
- (UIView * _Nullable)getPlacementView SWIFT_WARN_UNUSED_RESULT;
/// Sets placement default image. This image will be shown in placement when no ad is available.
/// \param image The image to set.
///
- (void)setDefaultImageWithImage:(UIImage * _Nonnull)image;
/// Sets gravity for ads that don’t fill entire placement area. Works only for sticky banner placements.
/// \param alignment The alignment to set.
///
- (void)setBannerAlignWithAlignment:(AATBannerAlign * _Nonnull)alignment;
/// Sets the targeting information for the placement
/// Information provided for placement overrides targeting information overrides targeting information for application set by the <code>AATSDK/setTargetingInfo(info:)</code>
@property (nonatomic, copy) NSDictionary<NSString *, NSArray<NSString *> *> * _Nullable targetingInfo;
/// Sets the content targeting url for the placement.
/// Information provided for placement overrides targeting information for application set by the <code>AATSDK/setContentTargetingUrl(targetingUrl:)</code>
@property (nonatomic, copy) NSString * _Nullable contentTargetingUrl;
/// note: not all ad-networks supports multiple urls
@property (nonatomic, copy) NSArray<NSString *> * _Nullable multiContentTargetingUrls;
- (void)enableCreativeHistoryWithSize:(NSInteger)size;
- (void)getCreativeHistoryWithCompletion:(void (^ _Nonnull)(NSArray<AATPlacementHistoryInfo *> * _Nonnull))completion;
@end


/// Conform to this protocol to listen to the AATStaticBannerPlacement events
SWIFT_PROTOCOL("_TtP6AATKit32AATStickyBannerPlacementDelegate_")
@protocol AATStickyBannerPlacementDelegate <AATAdDisplayDelegate, AATHaveAdDelegate, AATNoAdDelegate>
@end

@class BannerOptions;
@class InterstitialAdOptions;
@class RewardedVideoOptions;

SWIFT_CLASS("_TtC6AATKit22AATSuperAwesomeOptions")
@interface AATSuperAwesomeOptions : NSObject
- (nonnull instancetype)initWithBannerOptions:(BannerOptions * _Nullable)bannerOptions interstitialAdOptions:(InterstitialAdOptions * _Nullable)interstitialAdOptions rewardedVideoOptionsOptions:(RewardedVideoOptions * _Nullable)rewardedVideoOptionsOptions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, Orientation, closed) {
  OrientationAny = 0,
  OrientationPortrait = 1,
  OrientationLandscape = 2,
};

typedef SWIFT_ENUM(NSInteger, CloseButtonState, closed) {
  CloseButtonStateEnabled = 0,
  CloseButtonStateEnabledNoDelay = 1,
};


SWIFT_CLASS("_TtCC6AATKit22AATSuperAwesomeOptions14NetworkOptions")
@interface NetworkOptions : NSObject
- (nonnull instancetype)initWithParentalGateEnabled:(BOOL)parentalGateEnabled bumperPageEnabled:(BOOL)bumperPageEnabled bumperPageCustomAppName:(NSString * _Nullable)bumperPageCustomAppName bumperPageLogo:(UIImage * _Nullable)bumperPageLogo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AATSuperAwesomeOptions (SWIFT_EXTENSION(AATKit))
@end


SWIFT_CLASS("_TtCC6AATKit22AATSuperAwesomeOptions13BannerOptions")
@interface BannerOptions : NetworkOptions
/// init <code>AATSuperAwesomeOptions/BannerOptions-swift.class</code>
/// \param parentalGateEnabled Enable/disable the Parental gate
///
/// \param bumperPageEnabled Enable/disable the bumper page
///
/// \param bumperPageCustomAppName bumper page app name
///
/// \param bumperPageLogo bumper page logo
///
/// \param isBackgroundTransparent Enable/disable transparent background
///
- (nonnull instancetype)initWithParentalGateEnabled:(BOOL)parentalGateEnabled bumperPageEnabled:(BOOL)bumperPageEnabled bumperPageCustomAppName:(NSString * _Nullable)bumperPageCustomAppName bumperPageLogo:(UIImage * _Nullable)bumperPageLogo isBackgroundTransparent:(BOOL)isBackgroundTransparent OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParentalGateEnabled:(BOOL)parentalGateEnabled bumperPageEnabled:(BOOL)bumperPageEnabled bumperPageCustomAppName:(NSString * _Nullable)bumperPageCustomAppName bumperPageLogo:(UIImage * _Nullable)bumperPageLogo SWIFT_UNAVAILABLE;
@end


@interface AATSuperAwesomeOptions (SWIFT_EXTENSION(AATKit))
@end


SWIFT_CLASS("_TtCC6AATKit22AATSuperAwesomeOptions21InterstitialAdOptions")
@interface InterstitialAdOptions : NetworkOptions
/// init <code>AATSuperAwesomeOptions/InterstitialAdOptions-swift.class</code>
/// \param orientation ad orientation
///
/// \param closeButtonState close button state of type <code>AATSuperAwesomeOptions/CloseButtonState</code>
///
/// \param parentalGateEnabled Enable/disable the Parental gate
///
/// \param bumperPageEnabled Enable/disable the bumper page
///
/// \param bumperPageCustomAppName bumper page app name
///
/// \param bumperPageLogo bumper page logo
///
- (nonnull instancetype)initWithOrientation:(enum Orientation)orientation closeButtonState:(enum CloseButtonState)closeButtonState parentalGateEnabled:(BOOL)parentalGateEnabled bumperPageEnabled:(BOOL)bumperPageEnabled bumperPageCustomAppName:(NSString * _Nullable)bumperPageCustomAppName bumperPageLogo:(UIImage * _Nullable)bumperPageLogo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithParentalGateEnabled:(BOOL)parentalGateEnabled bumperPageEnabled:(BOOL)bumperPageEnabled bumperPageCustomAppName:(NSString * _Nullable)bumperPageCustomAppName bumperPageLogo:(UIImage * _Nullable)bumperPageLogo SWIFT_UNAVAILABLE;
@end


@interface AATSuperAwesomeOptions (SWIFT_EXTENSION(AATKit))
@end


SWIFT_CLASS("_TtCC6AATKit22AATSuperAwesomeOptions20RewardedVideoOptions")
@interface RewardedVideoOptions : InterstitialAdOptions
/// init <code>AATSuperAwesomeOptions/RewardedVideoOptions</code>
/// \param closeButtonAtEnd enable or disable auto-closing at the end
///
/// \param closeButtonWarningEnabled enable or disable close button warning
///
/// \param smallClickEnabled enable or disable small close button click
///
/// \param orientation ad orientation
///
/// \param closeButtonState close button state of type <code>AATSuperAwesomeOptions/CloseButtonState</code>
///
/// \param parentalGateEnabled Enable/disable the Parental gate
///
/// \param bumperPageEnabled Enable/disable the bumper page
///
/// \param bumperPageCustomAppName bumper page app name
///
/// \param bumperPageLogo bumper page logo
///
- (nonnull instancetype)initWithCloseButtonAtEnd:(BOOL)closeButtonAtEnd smallClickEnabled:(BOOL)smallClickEnabled closeButtonWarningEnabled:(BOOL)closeButtonWarningEnabled orientation:(enum Orientation)orientation closeButtonState:(enum CloseButtonState)closeButtonState parentalGateEnabled:(BOOL)parentalGateEnabled bumperPageEnabled:(BOOL)bumperPageEnabled bumperPageCustomAppName:(NSString * _Nullable)bumperPageCustomAppName bumperPageLogo:(UIImage * _Nullable)bumperPageLogo OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOrientation:(enum Orientation)orientation closeButtonState:(enum CloseButtonState)closeButtonState parentalGateEnabled:(BOOL)parentalGateEnabled bumperPageEnabled:(BOOL)bumperPageEnabled bumperPageCustomAppName:(NSString * _Nullable)bumperPageCustomAppName bumperPageLogo:(UIImage * _Nullable)bumperPageLogo SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6AATKit18AATSupplyChainData")
@interface AATSupplyChainData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6AATKit16AATUserTargeting")
@interface AATUserTargeting : NSObject
/// initialize <code>AATUserTargeting</code>
/// \param userId user id
///
/// \param gender user gender.
/// <ul>
///   <li>
///     <em>Important</em>: The default value is <code>AATGender.unknown</code> and will be ignored while performing the request.
///   </li>
/// </ul>
///
/// \param yearOfBirth user year of birth.
/// <ul>
///   <li>
///     <em>Important</em>: it has to be a 4-digit number
///   </li>
/// </ul>
///
/// \param keywords targeting keywords
///
- (nonnull instancetype)initWithUserId:(NSString * _Nullable)userId gender:(enum AATGender)gender yearOfBirth:(NSNumber * _Nullable)yearOfBirth keywords:(NSArray<NSString *> * _Nullable)keywords OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol AATVendorConsentDelegate;

/// AATKit vendor consent. Should be initialised with <code>AATVendorConsentDelegate</code>
/// see <code>init(delegate:)</code>
SWIFT_CLASS("_TtC6AATKit16AATVendorConsent")
@interface AATVendorConsent : AATConsentImplementation
/// Initialize a vendor consent instance. For more information, visit <a href="https://addapptr.gitbook.io/ios-integration/start/consent/vendor-consent">Vendor Consent</a>.
/// Will read the IAB consent string and CCPA string from UserDefaults if available.
/// \param delegate an instance of <code>AATVendorConsentDelegate</code>
///
- (nonnull instancetype)initWithDelegate:(id <AATVendorConsentDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
@end


@interface AATVendorConsent (SWIFT_EXTENSION(AATKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_PROTOCOL("_TtP6AATKit24AATVendorConsentDelegate_")
@protocol AATVendorConsentDelegate
/// Gets the consent for an ad network.
/// \param network an <code>AATAdNetwork</code> to get the consent for.
///
///
/// returns:
/// A <code>NonIABConsent</code> state for the passed ad network.
- (enum NonIABConsent)getConsentForNetwork:(enum AATAdNetwork)network SWIFT_WARN_UNUSED_RESULT;
/// Gets the consent for AddApptr GmbH as the legal entity holding the Gravite brand.
///
/// returns:
/// A <code>NonIABConsent</code> state for AddApptr GmbH.
- (enum NonIABConsent)getConsentForAddapptr SWIFT_WARN_UNUSED_RESULT;
@end


/// NonIABConsent.
typedef SWIFT_ENUM(NSInteger, NonIABConsent, open) {
/// <ul>
///   <li>
///     Unknown - if the user has never set a consent state.
///   </li>
/// </ul>
  NonIABConsentUnknown = 0,
/// <ul>
///   <li>
///     Consent has been granted by the user.
///   </li>
/// </ul>
  NonIABConsentObtained = 1,
/// <ul>
///   <li>
///     Consent has been declined by the user.
///   </li>
/// </ul>
  NonIABConsentWithheld = 2,
};


@interface PlacementDebugInfo (SWIFT_EXTENSION(AATKit))
@end


SWIFT_CLASS("_TtCCC6AATKit12AATDebugInfo18PlacementDebugInfo25FrequencyCappingDebugInfo")
@interface FrequencyCappingDebugInfo : NSObject
@property (nonatomic) NSInteger maxImpressionsPerSession;
@property (nonatomic) NSInteger maxImpressionsPerHour;
@property (nonatomic) NSInteger maxImpressionsPerDay;
@property (nonatomic) NSInteger maxImpressionsPerWeek;
@property (nonatomic) NSInteger maxImpressionsPerMonth;
@property (nonatomic) NSTimeInterval minTimeBetweenImpressions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
